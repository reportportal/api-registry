@startuml

Entity ReportPortalReportingService {
  Upload(UploadRequest) returns (UploadResponse)
  UploadStream(stream UploadRequest) returns (stream UploadResponse)
}

Frame {
  Entity UploadRequest {
    uuid: string
    ???timestamp(created_at): google.type.DateTime
    payload: oneOf
    --oneOf--
    start: Start
    finish: Finish
    save_log: SaveLog
    save_data: SaveData
  }

  Entity Start {
    name: string
    description: optional string
    attributes: repeated Attribute
    --oneOf--
    start_run: StartRun
    start_result: StartResult
  }

  Entity StartResult {
    code_ref: string
    test_case_id: string
    run_uuid: string
    parameters: repeated Parameter
    item: oneOf
    --oneOf--
    test_result: TestResult
    nested_step: NestedStep
  }

  Entity TestResult {
    ???type: ResultType
    retry_of: string
  }

  Entity NestedStep {
    parent_uuid: string
  }

  Entity StartRun {
    rerun: bool
    rerun_of: string
    mode: RunMode
  }

  Entity Finish {
    status: Status
    description: optional string
    attributes: repeated Attribute
    item: oneOf
    --oneOf--
    finish_run: FinishRun
    finish_result: FinishResult

  }

  Entity FinishRun {}

  Entity FinishResult {
    ???launch_uuid: string
    test_case_id: string
    retry_of: string
    issue: Issue
  }

  Entity Issue {
    issue_type: string
    comment: string
    auto_analyzed: bool
    ignore_analyzer: bool
    external_system_issues: repeated ExternalSystemIssue
  }

  Entity ExternalSystemIssue {
    ticket_id: string
    submit_date: google.type.DateTime
    bts_url: string
    bts_project: string
    url: string
    plugin_name: string
  }

  Entity SaveLog {
    result_uuid: string
    ???launch_uuid: string
    message: string
    level: string
    file: File
  }

  Entity File {
    name: string
    content_type: string
    attachment_id: string
  }

  Entity SaveData {
    name: string
    content_type: string
    content: bytes
  }

  Entity Attribute {
    key: string
    value: string
    hidden: bool
  }

  Entity Parameter {
    key: string
    value: string
  }

  enum ResultType {
    RESULT_TYPE_STEP_UNSPECIFIED
    RESULT_TYPE_BEFORE_CLASS
    RESULT_TYPE_BEFORE_GROUPS
    RESULT_TYPE_BEFORE_METHOD
    RESULT_TYPE_BEFORE_SUITE
    RESULT_TYPE_BEFORE_TEST
    RESULT_TYPE_AFTER_CLASS
    RESULT_TYPE_AFTER_GROUPS
    RESULT_TYPE_AFTER_METHOD
    RESULT_TYPE_AFTER_SUITE
    RESULT_TYPE_AFTER_TEST
  }

  enum Status {
    STATUS_PASSED_UNSPECIFIED
    STATUS_FAILED
    STATUS_SKIPPED
    STATUS_STOPPED
    STATUS_INTERRUPTED
    STATUS_CANCELLED
    STATUS_INFO
    STATUS_WARN
  }

  enum RunMode {
    RUN_MODE_DEFAULT_UNSPECIFIED
    RUN_MODE_DEBUG
  }
}

Frame {
  Entity UploadResponse {
    uuid: string
    result: OperationResult
    message: string
  }

  enum OperationResult {
    OPERATION_RESULT_OK_UNSPECIFIED
    OPERATION_RESULT_FAIL
  }
}

ReportPortalReportingService -- UploadRequest
ReportPortalReportingService -- UploadResponse

UploadRequest -- Start
UploadRequest -- Finish
UploadRequest -- SaveLog
UploadRequest -- SaveData

Start -- StartRun
Start -- StartResult
Start -- Attribute

StartRun -- RunMode

StartResult -- TestResult
StartResult -- NestedStep : ???
StartResult -- Parameter

TestResult -- ResultType

Finish -- FinishRun
Finish -- FinishResult
Finish -- Status
Finish -- Attribute

FinishResult -- Issue

Issue -- ExternalSystemIssue

SaveLog -- File

UploadResponse -- OperationResult

@enduml
openapi: 3.0.3
info:
  title: ReportPortal Reference API
  version: Reference
  description: |
    ![reportportal-logo](https://reportportal.io/docs/img/logo.svg)

    This is the API documentation for ReportPortal. We describe this documentation
    following our [API Principles](https://github.com/reportportal/reportportal-common-api/blob/main/docs/api-principles.md)
    and [RESTful API Guidelines](https://opensource.zalando.com/restful-api-guidelines/).

    Because this documentation is created according to the
    [API design first approach](https://swagger.io/resources/articles/adopting-an-api-first-approach/),
    it doesn't contain information about all existing endpoints. There are only pre-designed endpoints.
    If you want to see the full documentation, you can check
    the [Auto-generated API documentation](https://reportportal.io/docs/category/api/service-api).

    # Introduction

    ReportPortal is a service for continuous testing.
    It provides a platform for test automation and allows you to analyze
    the results of tests in various ways. The service is implemented as a web
    application and is available through a web interface or API.

    # Authentication

    ReportPortal uses the [JWT](https://jwt.io/) authentication protocol for UI client requests and
    the [API Key](https://reportportal.io/docs/reportportal-configuration/HowToGetAnAccessTokenInReportPortal/#2-authorization-with-users-api-key-for-agents)
    for agent requests.

    Both approaches use the same security scheme: `Bearer`.
  contact:
    name: ReportPortal Team
    email: support@reportportal.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: '{host}/{basePath}'
    description: ReportPortal server
    variables:
      host:
        default: https://demo.reportportal.io
        description: Host name and port (if needed) of Report Portal server
      basePath:
        default: api
        description: Base path of Report Portal API
paths: {}
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
security:
  - BearerAuth: []

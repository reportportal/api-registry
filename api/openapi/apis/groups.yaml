openapi: 3.0.3
info:
  title: Groups API
  version: 0.0.1
  description: |-
    The Groups collection API. You can use it to manage groups, users, and projects.
    The API is based on REST principles and uses standard HTTP methods.
  contact:
    name: ReportPortal team
    email: support@reportportal.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: '{protocol}://{authority}/{basePath}'
    description: ReportPortal server
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
        description: Protocol
      authority:
        default: demo.reportportal.io
        description: Host name and port (if needed) of Report Portal server
      basePath:
        default: api
        description: Base path of Report Portal API
security:
  - BearerAuth: []
paths:
  /groups:
    get:
      summary: Get all groups
      operationId: getGroups
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
      description: Get instance groups with optional filtering and sorting.
      parameters:
        - $ref: ../parameters/Offset.yaml
        - $ref: ../parameters/Limit.yaml
        - $ref: ../parameters/Order.yaml
        - schema:
            type: string
            default: name
          in: query
          name: sort
          description: Indicate sort by field.
        - schema:
            type: string
          in: query
          name: name
          description: Filter by name.
        - schema:
            type: string
            pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
          in: query
          name: slug
          description: Filter by slug.
      tags:
        - Groups
    post:
      summary: Create a group
      operationId: createGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../models/group/Group.yaml
      description: |-
        Create a group.

        ### Authority

        - `ADMINISTRATOR`
      tags:
        - Groups
  '/groups/{group_id}':
    parameters:
      - $ref: ../parameters/GroupId.yaml
    get:
      summary: Get a group
      operationId: getGroupById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/group/Group.yaml
      description: '#TODO disc.'
      tags:
        - Groups
    put:
      summary: Update a group
      operationId: updateGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupRequest'
      responses:
        '200':
          $ref: '#/components/responses/Update'
      description: '#TODO disc.'
      tags:
        - Groups
    delete:
      summary: Delete a group
      operationId: deleteGroup
      responses:
        '204':
          description: No Content
      description: '#TODO Disc.'
      tags:
        - Groups
  '/groups/{group_id}/users':
    parameters:
      - $ref: ../parameters/GroupId.yaml
    get:
      summary: Get all users of a group
      operationId: getUsersOfGroup
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupUsersPage'
      description: Get all users of a group.
      parameters:
        - $ref: ../parameters/Offset.yaml
        - $ref: ../parameters/Limit.yaml
        - $ref: ../parameters/Order.yaml
      tags:
        - Groups
        - Group's users
    post:
      summary: Add a user to a group
      operationId: addUserToGroupById
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupUser'
      description: '#TODO'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  $ref: ../types/identifier.yaml
      tags:
        - Groups
        - Group's users
  '/groups/{group_id}/users/{user_id}':
    parameters:
      - $ref: ../parameters/GroupId.yaml
      - $ref: ../parameters/UserId.yaml
    get:
      summary: Get a user of a group
      operationId: getUserOfGroupById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupUser'
      description: Get all users of a group.
      tags:
        - Groups
        - Group's users
    delete:
      summary: Delete a group user
      operationId: deleteUserOfGroupById
      description: '#TODO'
      responses:
        '204':
          description: No Content
      tags:
        - Groups
        - Group's users
  '/groups/{group_id}/projects':
    parameters:
      - $ref: ../parameters/GroupId.yaml
    get:
      summary: Get all projects of a group
      operationId: getProjectsOfGroup
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupProjectsPage'
      description: Get all projects of a group.
      parameters:
        - $ref: ../parameters/Offset.yaml
        - $ref: ../parameters/Limit.yaml
        - $ref: ../parameters/Order.yaml
      tags:
        - Groups
        - Group's projects
    post:
      summary: Add a project to a group
      operationId: addProjectToGroup
      description: '#TODO'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupProject'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  $ref: ../types/identifier.yaml
                project_role:
                  $ref: ../enums/projectRole.yaml
      tags:
        - Groups
        - Group's projects
  '/groups/{group_id}/projects/{project_id}':
    parameters:
      - $ref: ../parameters/GroupId.yaml
      - $ref: ../parameters/ProjectId.yaml
    get:
      summary: Get a project of a group
      description: '#TODO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupProject'
      operationId: getProjectOfGroupById
      tags:
        - Groups
        - Group's projects
    put:
      summary: Update a group project
      operationId: updateProjectOfGroupById
      description: '#TODO'
      responses:
        '200':
          $ref: '#/components/responses/Update'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                project_role:
                  $ref: ../enums/projectRole.yaml
      tags:
        - Group's projects
        - Groups
    delete:
      summary: Delete a group project
      operationId: deleteProjectOfGroupById
      responses:
        '204':
          description: No Content
      description: '#TODO'
      tags:
        - Group's projects
        - Groups
components:
  schemas:
    GroupPage:
      title: Group page
      allOf:
        - $ref: ../models/Offset.yaml
        - properties:
            items:
              type: array
              items:
                $ref: ../models/group/Group.yaml
      type: object
    CreateGroupRequest:
      title: Create group request
      allOf:
        - $ref: ../models/group/GroupBase.yaml
        - type: object
          properties:
            org_id:
              $ref: ../types/identifier.yaml
          required:
            - org_id
    UpdateGroupRequest:
      title: Update group request
      allOf:
        - $ref: ../models/group/GroupBase.yaml
    GroupUsersPage:
      title: Group users page
      allOf:
        - $ref: ../models/Offset.yaml
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/GroupUser'
    GroupProjectsPage:
      title: Group projects page
      allOf:
        - $ref: ../models/Offset.yaml
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/GroupProject'
    GroupUser:
      title: Group user
      allOf:
        - type: object
          properties:
            id:
              $ref: ../types/identifier.yaml
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
        - $ref: ../models/user/UserBase.yaml
        - $ref: ../models/user/UserLinks.yaml
    GroupProject:
      title: Group project
      allOf:
        - type: object
          properties:
            id:
              $ref: ../types/identifier.yaml
            project_role:
              $ref: ../enums/projectRole.yaml
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
        - $ref: ../models/project/ProjectBase.yaml
  responses:
    Error:
      description: Error problem response
      content:
        application/problem+json:
          schema:
            $ref: ../models/Problem.yaml
    Update:
      description: Successful update response
      content:
        application/json:
          schema:
            title: Successful update
            type: object
            properties:
              message:
                type: string
                example: The update was completed successfully.
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  parameters: {}
tags:
  - name: Groups
  - name: Group's users
  - name: Group's projects

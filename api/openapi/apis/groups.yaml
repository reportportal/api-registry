openapi: 3.0.3
info:
  title: Groups API
  version: 0.0.1
  description: |-
    The Group collection API. You can use it to manage groups, users, and projects.
    The API is based on REST principles and uses standard HTTP methods.
  contact:
    name: ReportPortal
    email: support@reportportal.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: '{protocol}://{authority}/{basePath}'
    description: ReportPortal server
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
        description: Protocol
      authority:
        default: demo.reportportal.io
        description: Host name and port (if needed) of Report Portal server
      basePath:
        default: api
        description: Base path of Report Portal API
security:
  - BearerAuth: []
paths:
  /groups:
    get:
      summary: Get all groups
      operationId: getGroups
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          description: Payment Required
        '403':
          description: Forbidden
      description: Get instance groups with optional filtering and sorting.
      parameters:
        - $ref: ../parameters/Offset.yaml
        - $ref: ../parameters/Limit.yaml
        - schema:
            type: string
            default: name
          in: query
          name: sort
          description: Indicate sort by field.
        - $ref: ../parameters/Order.yaml
      tags:
        - Groups
    post:
      summary: Create a group
      operationId: createGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../models/group/GroupInfo.yaml
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
        '403':
          description: Forbidden
        '409':
          description: Conflict
      description: |-
        Create a group.

        ### Authority

        - `ADMINISTRATOR`
      tags:
        - Groups
  '/groups/{group_id}':
    parameters:
      - $ref: ../parameters/GroupId.yaml
    get:
      summary: Get group
      operationId: getGroupById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/group/GroupInfo.yaml
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Get a group by ID.
      tags:
        - Groups
    put:
      summary: Update group
      operationId: updateGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupRequest'
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
      description: Update a group by ID.
      tags:
        - Groups
    delete:
      summary: Delete group
      operationId: deleteGroup
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Delete a group by ID.
      tags:
        - Groups
  '/groups/{group_id}/users':
    parameters:
      - $ref: ../parameters/GroupId.yaml
    get:
      summary: Get all group users
      operationId: getGroupUsers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupUsersPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: Get all users of group.
      parameters:
        - $ref: ../parameters/Offset.yaml
        - $ref: ../parameters/Limit.yaml
      tags:
        - Groups
  '/groups/{group_id}/users/{user_id}':
    parameters:
      - $ref: ../parameters/GroupId.yaml
      - $ref: ../parameters/UserId.yaml
    get:
      summary: Get group user
      operationId: getGroupUserById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupUserInfo'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: Get all users of group.
      tags:
        - Groups
    delete:
      summary: Delete group user
      operationId: deleteUserFromGroupById
      description: Delete a user from a group.
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      tags:
        - Groups
    put:
      summary: Add group user
      operationId: addUserToGroupById
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: Add user into group.
      tags:
        - Groups
  '/groups/{group_id}/projects':
    parameters:
      - $ref: ../parameters/GroupId.yaml
    get:
      summary: Get all group projects
      operationId: getGroupProjects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupProjectsPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: Get all projects of group.
      parameters:
        - $ref: ../parameters/Offset.yaml
        - $ref: ../parameters/Limit.yaml
      tags:
        - Groups
  '/groups/{group_id}/projects/{project_id}':
    parameters:
      - $ref: ../parameters/GroupId.yaml
      - $ref: ../parameters/ProjectId.yaml
    get:
      summary: Get group project
      description: Get project of group.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupProjectInfo'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: getGroupProjectById
      tags:
        - Groups
    put:
      summary: Add or update group project
      operationId: addProjectToGroupById
      description: Add or update project in group.
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                permission:
                  $ref: ../enums/projectRole.yaml
      tags:
        - Groups
    delete:
      summary: Delete group project
      operationId: deleteProjectFromGroupById
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: Delete project from group.
      tags:
        - Groups
components:
  schemas:
    GroupPage:
      title: Group page
      allOf:
        - $ref: ../models/Offset.yaml
        - properties:
            items:
              type: array
              description: List of groups.
              items:
                $ref: ../models/group/GroupInfo.yaml
      description: Page of groups.
      type: object
    CreateGroupRequest:
      title: Create group request
      allOf:
        - $ref: ../models/group/GroupBase.yaml
      description: Create group request.
    UpdateGroupRequest:
      title: Update group request
      allOf:
        - $ref: ../models/group/GroupBase.yaml
      description: Update group request.
    GroupUsersPage:
      title: Group users page
      allOf:
        - $ref: ../models/Offset.yaml
        - type: object
          properties:
            items:
              type: array
              description: List of group users.
              items:
                $ref: '#/components/schemas/GroupUserInfo'
      description: Page of group users.
    GroupProjectsPage:
      title: Group projects page
      allOf:
        - $ref: ../models/Offset.yaml
        - type: object
          properties:
            items:
              type: array
              description: List of group projects.
              items:
                $ref: '#/components/schemas/GroupProjectInfo'
      description: Page of group projects.
    GroupUserInfo:
      title: Group user
      description: Information about a user as a group member.
      type: object
      properties:
        id:
          $ref: ../types/identifier.yaml
        uuid:
          type: string
          format: uuid
          description: User identifier for external systems.
        email:
          type: string
          format: email
          description: User email.
        full_name:
          $ref: ../types/name.yaml
        external_id:
          type: string
          description: External user identifier.
        instance_role:
          $ref: ../enums/instanceRole.yaml
        active:
          type: boolean
          description: User activity status.
        account_type:
          $ref: ../enums/accountType.yaml
        added_at:
          type: string
          format: date-time
          description: Timestamp of user adding to group.
    GroupProjectInfo:
      title: Group project
      x-stoplight:
        id: 18a7cdfd7ecfc
      description: Information about a project as a group member.
      type: object
      properties:
        id:
          $ref: ../types/identifier.yaml
        name:
          $ref: ../types/name.yaml
        permission:
          $ref: ../enums/projectRole.yaml
        added_at:
          type: string
          format: date-time
          description: Timestamp of project adding to group.
        updated_at:
          type: string
          format: date-time
          description: Timestamp of project updating in group.
  responses:
    Error:
      description: Error problem response
      content:
        application/problem+json:
          schema:
            $ref: ../models/Problem.yaml
    Update:
      description: Successful update response
      content:
        application/json:
          schema:
            title: Successful update
            type: object
            properties:
              message:
                type: string
                example: The update was completed successfully.
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
tags:
  - name: Groups

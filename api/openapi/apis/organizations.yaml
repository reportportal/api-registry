openapi: 3.0.3
info:
  title: ReportPortal Organizations API
  version: Organization
  description: API Collection for working with organizations.
  contact:
    name: Reingold Shekhtel
    email: reingold_shekhtel@epam.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: '{host}{basePath}'
    description: ReportPortal server
    variables:
      host:
        default: 'https://demo.reportportal.io'
        description: Host name and port (if needed) of Report Portal server
      basePath:
        default: /api
        description: Base path of Report Portal API
paths:
  /organizations:
    get:
      summary: Get a list of organizations
      tags:
        - organizations
        - implemented
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
      operationId: get-organizations
      x-permissions:
        - role: ADMINISTRATOR
          access: full
        - role: MANAGER
          access: restricted
          description: |
            Limited to viewing only their assigned organizations.
        - role: MEMBER
          access: restricted
          description: |
            Limited to viewing only their assigned organizations.
      description: |-
        Get a list of existing organizations.

        ### Authority

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        ### Access level

        - `ADMINISTRATOR`
        - `MANAGER` : limited to viewing only their assigned organizations.
        - `MEMBER` : limited to viewing only their assigned organizations.
      parameters:
        - $ref: ../parameters/Offset.yaml
        - $ref: ../parameters/Limit.yaml
        - $ref: ../parameters/Order.yaml
        - schema:
            type: string
          in: query
          name: name
          description: Filter organizations by name by substring.
        - schema:
            type: string
            pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
          in: query
          name: slug
          description: Filter organizations by slug.
        - schema:
            type: string
            default: name
          in: query
          name: sort
          description: Indicate sort by field.
    post:
      summary: Create a new organization
      operationId: post-organizations
      tags:
        - organizations
      description: |-
        > **Enterprise edition feature**

        Create a new organization. Provide name and slug.

        ### Authority

        - `ADMINISTRATOR`
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRequest'
        description: 'You can create an organization provide name and slug. If the `slug` is not provided, it will be generated from the `name`.'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationInfo'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '409':
          $ref: '#/components/responses/Error'
  /organizations/searches:
    post:
      summary: Create search request for organizations
      operationId: post-organizations-searches
      tags:
        - organizations
        - implemented
      description: |
        Create search request for organizations by provided criteria.

        You can use the following attributes as a `search_criteria[*].filter_key` for filtering:

        - `name` - filter by organization name.
        - `slug` - filter by organization slug.
        - `type` - filter by organization type.
        - `created_at` - filter by creation date.
        - `updated_at` - filter by last update date.
        - `users` - filter by the number of users.
        - `projects` - filter by the number of projects.
        - `launches` - filter by the number of launches.
        - `last_launch_occurred` - filter by the last launch occurrence.

        ### CSV Export

        Use text/csv for the Accept header to export organizations.

        ### Authority

        - `ADMINISTRATOR`
      parameters:
        - schema:
            type: string
            enum:
              - text/csv
              - application/json
            default: application/json
          in: header
          name: Accept
          description: Indicate response format. Use `text/csv` to export organizations.
      requestBody:
        description: Provide search criteria for organizations.
        content:
          application/json:
            schema:
              $ref: ../models/SearchCriteriaRQ.yaml
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationPage'
            text/csv:
              schema:
                type: string
                format: binary
                description: |-
                  CSV contains:
                  - Organization name
                  - Type
                  - Projects
                  - Members
                  - Launches
                  - Last launch date
                  - Storage
                  - Billing plan
              example: |-
                Organization name,Type,Projects,Members,Launches,Last launch date,Storage,Billing_plan
                Example Organization,Internal,10,100,50,2023-10-01T12:00:00Z,75,Pro
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
  '/organizations/{org_id}':
    get:
      summary: Get organization information
      tags:
        - organizations
        - implemented
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationInfo'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-organizations-org_id
      description: |-
        Provide organization information.

        ### Authority

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`
    parameters:
      - $ref: ../parameters/OrgId.yaml
    put:
      summary: Update organization
      operationId: put-organizations-org_id
      tags:
        - organizations
      description: |-
        > **Enterprise edition feature** 
        >
        > Available only if an Organization plugin is enabled.

        Update organization information with the provided data.

        ### Authority

        - `ADMINISTRATOR`
        - `MANAGER`
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationRequest'
        description: Provide organization information for update.
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
    delete:
      summary: Delete organization
      operationId: delete-organizations-org_id
      tags:
        - organizations
      description: |-
        > **Enterprise edition feature** 
        >
        > Available only if an Organization plugin is enabled.

        Delete organization by identifier.

        ### Authority

        - `ADMINISTRATOR`
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
  '/organizations/{org_id}/settings':
    parameters:
      - $ref: ../parameters/OrgId.yaml
    get:
      summary: Get organization settings
      operationId: getOrgSettingsByOrgId
      tags:
        - organizations
      x-permissions:
        - role: ADMINISTRATOR
          access: full
        - role: MANAGER
          access: full
        - role: MEMBER
          access: full
      description: |-
        Get organization settings.

        ### Authority

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationSettings'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
    put:
      summary: Update organization settings
      operationId: updateOrgSettingsByOrgId
      tags:
        - organizations
      x-permissions:
        - role: ADMINISTRATOR
          access: full
        - role: MANAGER
          access: full
      description: |-
        > **Important**: Values for `logs.period` and `attachments.period` cannot exceed the value of `launches.period`.

        Update organization settings.

        ### Authority

        - `ADMINISTRATOR`
        - `MANAGER`
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationSettings'
  '/organizations/{org_id}/users':
    parameters:
      - $ref: ../parameters/OrgId.yaml
    get:
      summary: Get organization's users
      tags:
        - organization-users
        - implemented
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUsersPage'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-organizations-org_id-users
      description: |-
        Provides a list of organization's users.

        ### Authority

        - `ADMINISTRATOR`
        - `MANAGER`
      parameters:
        - $ref: ../parameters/Offset.yaml
        - $ref: ../parameters/Limit.yaml
        - $ref: ../parameters/Order.yaml
        - in: query
          name: sort
          description: Indicate sort by field.
          schema:
            type: string
            default: full_name
        - schema:
            type: string
          in: query
          name: full_name
          description: Filter users by full name containing (case insensitive).
    post:
      summary: Assignment user to organization
      operationId: post-organizations-org_id-users
      description: |-
        This is a endpoint that provides a flow for assigning a user to the organization.
        It can be used as a bulk endpoint if you provide a list of projects for assignment.

        ### Authority

        - `ADMINISTRATOR`
        - `MANAGER`

        ### Project authority

        - `ADMINISTRATOR`
        - `MANAGER`

        #### For assignment user to the organization's projects:

        A users with the `ADMINISTRATOR` and `MANAGER` roles can assign users to the organization.

        ### Response event statuses

        You will get different statuses for project assignments according to which user you want
        to assign to the organization.
      tags:
        - organization-users
        - implemented
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgUserAssignment'
        description: Definition for a user assignment.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: User Assignment Response
                type: object
                properties:
                  message:
                    type: string
                    default: The user was added to the organization.
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '409':
          $ref: '#/components/responses/Error'
  '/organizations/{org_id}/users/{user_id}':
    parameters:
      - $ref: ../parameters/OrgId.yaml
      - $ref: ../parameters/UserId.yaml
    put:
      summary: Update organization user details
      operationId: put-organizations-org_id-users-user_id
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              title: Org User Update Request
              type: object
              properties:
                org_role:
                  $ref: ../enums/orgRole.yaml
                projects:
                  type: array
                  items:
                    $ref: ../models/user/UserProjectInfo.yaml
        description: Provide organization's user information for update.
      tags:
        - organization-users
      description: |-
        For managing user roles and project assignment within organization.



        ### Authority

        - `ADMINISTRATOR`
        - `MANAGER`

        ### Project authority

        - `ADMINISTRATOR`
        - `MANAGER`

        #### For assignment user to the organization's projects:

        Users with the `Administrator` and `Manager` roles can change user roles and project assignment within organization.

        ### Response event statuses

        You will get different statuses for project assignments according to which user you want
        to assign to the organization.
    delete:
      summary: Unassigned organization user
      operationId: delete-organizations-org_id-users-user_id
      tags:
        - organization-users
      description: |-
        Unassigned user from an organization and all organization projects.

        ### Authority

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        ### Access level

        - `ADMINISTRATOR` - no restrictions.
        - `MANAGER` - no restrictions.
        - `MEMBER` - restricted to unassign only themselves.
      responses:
        '204':
          description: No Content
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
  '/organizations/{org_id}/users/{user_id}/projects':
    parameters:
      - $ref: ../parameters/OrgId.yaml
      - $ref: ../parameters/UserId.yaml
    get:
      summary: Get organization user's projects
      operationId: getOrgUserProjects
      description: |-
        Get organization user's projects.

        ### Authority

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        A user with `MEMBER` role can get only his projects.
      tags:
        - organization-users
      parameters:
        - $ref: ../parameters/Offset.yaml
        - $ref: ../parameters/Limit.yaml
        - $ref: ../parameters/Order.yaml
        - in: query
          name: sort
          description: Indicate sort by field.
          schema:
            type: string
            default: name
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgUserProjectPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
  '/organizations/{org_id}/projects':
    parameters:
      - $ref: ../parameters/OrgId.yaml
    get:
      summary: Get organization projects
      tags:
        - organization-projects
        - implemented
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationProjectsPage'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-organizations-org_id-projects
      parameters:
        - $ref: ../parameters/Offset.yaml
        - $ref: ../parameters/Limit.yaml
        - $ref: ../parameters/Order.yaml
        - schema:
            type: string
          in: query
          name: name
          description: Filter projects by containing name.
        - schema:
            type: string
            pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
          in: query
          name: slug
          description: Filter projects by slug.
        - schema:
            type: string
            default: name
          in: query
          name: sort
          description: Indicate sort by field.
      description: |-
        Get a list of organization projects.

        ### Authority

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        ### Access level

        - `ADMINISTRATOR` - no restrictions.
        - `MANAGER` - no restrictions.
        - `MEMBER` - restricted to viewing only their assigned projects.
    post:
      summary: Create a new project
      tags:
        - organization-projects
        - implemented
      operationId: post-organizations-org_id-projects
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../models/project/ProjectInfo.yaml
        '400':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '409':
          $ref: '#/components/responses/Error'
      description: |-
        Create a new project in the organization. 

        ### Authority

        - `ADMINISTRATOR`
        - `MANAGER`
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/project/ProjectBase.yaml
        description: 'You can create an project provide name and slug. If the `slug` is not provided, it will be generated from the `name`.'
  '/organizations/{org_id}/projects/searches':
    parameters:
      - $ref: ../parameters/OrgId.yaml
    post:
      summary: Create search request for organization projects
      operationId: post-organizations-org_id-projects-searches
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationProjectsPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
      description: |-
        Create search request for organization projects by provided criteria.

        You can use the following attributes as a `search_criteria[*].filter_key` for filtering:

        - `name` - filter by project name.
        - `slug` - filter by project slug.
        - `key` - filter by project key.
        - `created_at` - filter by creation date.
        - `updated_at` - filter by last update date.
        - `users` - filter by the number of users.
        - `launches` - filter by the number of launches.
        - `last_launch_occurred` - filter by the last launch occurrence.
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/SearchCriteriaRQ.yaml
      tags:
        - organization-projects
        - implemented
  '/organizations/{org_id}/projects/{project_id}':
    parameters:
      - $ref: ../parameters/OrgId.yaml
      - $ref: ../parameters/ProjectId.yaml
    patch:
      summary: Partial project update
      operationId: patch-organizations-org_id-projects-project_id
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: |-
        Partial update project information.
        Model relates with a PUT Project update model.

        | Path       | Operation | Value
        |-           |-          |-
        | `/name`    | `replace` | `string`
        | `/slug`    | `replace` | `string`
        | `/users/-` | `add`     | `object{id:int,project_role:string}`
        | `/users`   | `replace` | `array<object{id:int,project_role:string}>`, `array<null>`
        | `/users`   | `remove`  | `array<object{id:int}>`, `null`

        ### Authority

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        ### Member authority

        - `EDITOR`
      tags:
        - organization-projects
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: ../models/PatchOperation.yaml
    delete:
      summary: Delete project
      tags:
        - organization-projects
        - implemented
      operationId: delete-organizations-org_id-projects-project_id
      responses:
        '204':
          description: No Content
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: |-
        Delete project.

        ### Authority

        - `ADMINISTRATOR`
        - `MANAGER`
  '/organizations/{org_id}/groups':
    parameters:
      - $ref: ../parameters/OrgId.yaml
    get:
      summary: Get all groups
      operationId: getOrgGroups
      x-permissions:
        - role: ADMINISTRATOR
          access: full
        - role: MANAGER
          access: full
      tags:
        - organization-groups
      description: |-
        Get instance groups with optional filtering and sorting.

        ### Authority

        - `ADMINISTRATOR`
        - `MANAGER`
      parameters:
        - $ref: ../parameters/Offset.yaml
        - $ref: ../parameters/Limit.yaml
        - $ref: ../parameters/Order.yaml
        - schema:
            type: string
            default: name
          in: query
          name: sort
          description: Indicate sort by field.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgGroupPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
    post:
      summary: Create a group
      operationId: createOrgGroup
      x-permissions:
        - role: ADMINISTRATOR
          access: full
        - role: MANAGER
          access: full
      tags:
        - organization-groups
      description: |-
        Create a group.

        ### Authority

        - `ADMINISTRATOR`
        - `MANAGER` : Access to groups when assigned to an organization.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrgGroupRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../models/group/GroupInfo.yaml
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '409':
          $ref: '#/components/responses/Error'
components:
  schemas:
    OrganizationInfo:
      title: Organization information
      description: Various information about an organization.
      allOf:
        - $ref: ../models/org/OrganizationBase.yaml
        - type: object
          properties:
            id:
              $ref: ../types/identifier.yaml
            type:
              $ref: ../enums/orgType.yaml
            external_id:
              type: string
              description: |-
                External organization identifier.
                It is created for integration.
            owner_id:
              $ref: ../types/identifier.yaml
              description: |-
                Identifier of the personal organization owner.
                It's applicable only for personal organizations.
            created_at:
              type: string
              format: date-time
              description: Creation date.
            updated_at:
              type: string
              format: date-time
              description: Last update date.
        - $ref: '#/components/schemas/OrganizationStats'
    OrganizationStats:
      title: Organization statistics
      type: object
      description: General information about the organization.
      properties:
        relationships:
          type: object
          properties:
            users:
              type: object
              description: General information about the organization users.
              properties:
                meta:
                  type: object
                  properties:
                    count:
                      type: integer
                      minimum: 0
                      description: Total count of users in the organization.
            projects:
              type: object
              description: General information about the organization projects.
              properties:
                meta:
                  type: object
                  properties:
                    count:
                      type: integer
                      minimum: 0
                      description: Total count of projects in the organization.
            launches:
              type: object
              description: General information about the organization launches.
              properties:
                meta:
                  type: object
                  properties:
                    last_occurred_at:
                      type: string
                      format: date-time
                      description: Last launch occurrence date.
                    count:
                      type: integer
                      minimum: 0
                      description: |-
                        Total count of launches in the organization.
                        Access: Admin, Manager
            billing:
              type: object
              description: |-
                General information about the organization billing.
                Available only if a Billing plugin is enabled.
              properties:
                meta:
                  type: object
                  properties:
                    plan_name:
                      type: string
                      description: Plan name.
                    storage_usage:
                      type: integer
                      minimum: 0
                      description: Storage usage in percents.
                      maximum: 100
    OrganizationPage:
      title: Organization profiles page
      allOf:
        - $ref: ../models/Offset.yaml
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/OrganizationInfo'
    OrganizationUser:
      title: Organization user account
      description: A comprehensive set of user information related to a user's organization.
      allOf:
        - $ref: ../models/user/UserInfo.yaml
        - type: object
          properties:
            org_role:
              $ref: ../enums/orgRole.yaml
            assigned_at:
              type: string
              format: date-time
              description: |-
                A time when a user was assigned to
                the organization.
            stats:
              type: object
              properties:
                project_stats:
                  type: object
                  description: Statistics related to the user's projects.
                  properties:
                    total_count:
                      type: integer
                      minimum: 0
                      description: Total number of user's projects in the organization.
    OrganizationUsersPage:
      title: List of organization users
      allOf:
        - $ref: ../models/Offset.yaml
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/OrganizationUser'
    OrganizationProjectsPage:
      title: List of organization projects
      allOf:
        - $ref: ../models/Offset.yaml
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: ../models/project/ProjectInfo.yaml
          required:
            - items
    OrgUserAssignment:
      title: User assignment request
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          description: User's internal identifier.
        org_role:
          $ref: ../enums/orgRole.yaml
        projects:
          type: array
          items:
            $ref: ../models/user/UserProjectInfo.yaml
      required:
        - id
    OrgUserProject:
      title: Organization user project
      allOf:
        - $ref: ../models/user/UserProjectInfo.yaml
        - $ref: ../models/project/ProjectBase.yaml
    OrgUserProjectPage:
      title: Organization user page
      allOf:
        - $ref: ../models/Offset.yaml
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/OrgUserProject'
    OrganizationSettings:
      title: Organization settings
      type: object
      properties:
        retention_policy:
          type: object
          description: |-
            Organisation retention policy settings.

            Values for `logs.period` and `attachments.period` cannot exceed the value of `launches.period`.
          required:
            - launches
            - logs
            - attachments
          properties:
            launches:
              type: object
              description: Launches retention policy settings.
              required:
                - period
              properties:
                period:
                  type: integer
                  minimum: 0
                  description: |-
                    Number of time units to keep launches.
                    Set `0` to keep attachments forever (retention policy disabled).
                    This value acts as an upper limit for `logs.period` and `attachments.period`.
                  default: 90
                unit:
                  $ref: ../enums/timeUnit.yaml
            logs:
              type: object
              description: Logs retention policy settings.
              required:
                - period
              properties:
                period:
                  type: integer
                  minimum: 0
                  description: |-
                    Number of time units to keep launches.
                    Set `0` to keep attachments forever (retention policy disabled).
                    Cannot exceed the value of `launches.period`.
                  default: 90
                unit:
                  $ref: ../enums/timeUnit.yaml
            attachments:
              type: object
              description: Attachments retention policy settings.
              required:
                - period
              properties:
                period:
                  type: integer
                  minimum: 0
                  description: |-
                    Number of time units to keep launches.
                    Set `0` to keep attachments forever (retention policy disabled).
                    Cannot exceed the value of `launches.period`.
                  default: 14
                unit:
                  $ref: ../enums/timeUnit.yaml
      required:
        - retention_policy
    OrgGroupPage:
      title: Organization groups page
      description: Page of organization groups.
      type: object
      allOf:
        - $ref: ../models/Offset.yaml
        - properties:
            items:
              type: array
              description: List of groups.
              items:
                $ref: ../models/group/GroupInfo.yaml
    CreateOrgGroupRequest:
      title: Create group request
      description: Create group request.
      allOf:
        - $ref: ../models/group/GroupBase.yaml
    CreateOrganizationRequest:
      title: Create organization request
      description: Request body for creating an organization.
      type: object
      allOf:
        - $ref: ../models/org/OrganizationBase.yaml
        - type: object
          properties:
            type:
              type: string
              description: Type of the organization.
              enum:
                - INTERNAL
                - EXTERNAL
              default: INTERNAL
    UpdateOrganizationRequest:
      title: Update organization request
      description: Request body for updating an organization.
      type: object
      allOf:
        - $ref: ../models/org/OrganizationBase.yaml
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  responses:
    Update:
      description: Successful update response
      content:
        application/json:
          schema:
            title: Successful update
            type: object
            properties:
              message:
                type: string
                default: The update was completed successfully.
    Error:
      description: Error problem response
      content:
        application/problem+json:
          schema:
            $ref: ../models/Problem.yaml
tags:
  - name: organizations
    description: API for working with organizations.
  - name: organization-users
    description: API for working with organization users.
  - name: organization-projects
    description: API for working with organization projects.
  - name: organization-groups
    description: API for working with organization groups.
  - name: implemented
    description: API endpoints that are implemented and available for use.
security:
  - BearerAuth: []

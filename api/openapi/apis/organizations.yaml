openapi: 3.0.3
info:
  title: Organizations API
  version: '0.1'
  description: API Collection for working with organizations.
  contact:
    name: Reingold Shekhtel
    email: reingold_shekhtel@epam.com
servers:
  - url: '{protocol}://{authority}/{basePath}'
    description: ReportPortal server
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
        description: Protocol
      authority:
        default: demo.reportportal.io
        description: Host name and port (if needed) of Report Portal server
      basePath:
        default: api
        description: Base path of Report Portal API
paths:
  /organizations:
    get:
      summary: Get a list of organizations
      tags:
        - Organization
        - Implemented
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationProfilesPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
      operationId: get-organizations
      description: |-
        Get a list of existing organizations.

        ### Authority

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        ### Access level

        - `ADMINISTRATOR` - no restrictions.
        - `MANAGER` - limited to viewing only their assigned organizations.
        - `MEMBER` - limited to viewing only their assigned organizations.
      parameters:
        - $ref: ../parameters/Pagination.yaml#/Offset
        - $ref: ../parameters/Pagination.yaml#/Limit
        - $ref: ../parameters/Pagination.yaml#/Order
        - schema:
            type: string
          in: query
          name: name
          description: Filter organizations by name by substring
        - schema:
            type: string
            pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
          in: query
          name: slug
          description: Filter organizations by slug
        - schema:
            type: string
            default: name
          in: query
          name: sort
          description: Indicate sort by field
    post:
      summary: Create a new organization
      operationId: post-organizations
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationInfo'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: ../models/Problem.yaml
        '402':
          description: Payment Required
          content:
            application/problem+json:
              schema:
                $ref: ../models/Problem.yaml
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: ../models/Problem.yaml
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: ../models/Problem.yaml
      description: |
        > **Enterprise edition feature** 
        >
        > Available only if an Organization plugin is enabled.

        Create a new organization. Provide name and slug.

        ### Authority: 

        - `ADMINISTRATOR`
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationDetails'
        description: 'You can create an organization provide name and slug. If the `slug` is not provided, it will be generated from the `name`.'
      tags:
        - Organization
        - Ready for implementation
  '/organizations/{org_id}':
    get:
      summary: Get organization information
      tags:
        - Organization
        - Ready for implementation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationProfile'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-organizations-org_id
      description: |-
        Provide organization information.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`
    parameters:
      - $ref: '#/components/parameters/OrganizationId'
    put:
      summary: Update organization
      operationId: put-organizations-org_id
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: |-
        > **Enterprise edition feature** 
        >
        > Available only if an Organization plugin is enabled.

        Update organization information with the provided data.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationDetails'
        description: Provide organization information for update.
      tags:
        - Organization
        - Ready for implementation
      x-internal: false
    patch:
      summary: Partial organization update
      operationId: patch-organizations-org_id
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: |-
        > **Enterprise edition feature** 
        >
        > Available only if an Organization plugin is enabled.

        Particular organization fields update via the [JSON Merge Patch standard](https://datatracker.ietf.org/doc/html/rfc7386).

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: ../models/PatchOperation.yaml
      tags:
        - Organization
        - Ready for implementation
      x-internal: false
    delete:
      summary: Delete organization
      operationId: delete-organizations-org_id
      responses:
        '204':
          description: No Content
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: |-
        > **Enterprise edition feature** 
        >
        > Available only if an Organization plugin is enabled.

        Delete organization by identifier.

        ### Authority:

        - `ADMINISTRATOR`
      tags:
        - Organization
        - Ready for implementation
      x-internal: false
  '/organizations/{org_id}/users':
    parameters:
      - $ref: '#/components/parameters/OrganizationId'
    get:
      summary: Get organization's users
      tags:
        - Organization User
        - Ready for implementation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUsersPage'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-organizations-org_id-users
      description: |-
        Provides a list of organization's users.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
      parameters:
        - $ref: ../parameters/Pagination.yaml#/Offset
        - $ref: ../parameters/Pagination.yaml#/Limit
        - $ref: ../parameters/Pagination.yaml#/Order
        - in: query
          name: sort
          description: Indicate sort by field
          schema:
            type: string
            default: name
    post:
      summary: Assignment user to organization
      operationId: post-organizations-org_id-users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: User Assignment Response
                type: object
                properties:
                  message:
                    type: string
                    default: The user was added to the organization.
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: ../models/Problem.yaml
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: ../models/Problem.yaml
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: ../models/Problem.yaml
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ../models/Problem.yaml
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: ../models/Problem.yaml
      description: |-
        This is a endpoint that provides a flow for assigning a user to the organization.
        It can be used as a bulk endpoint if you provide a list of projects for assignment.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`

        ### Project authority:

        - `ADMINISTRATOR`
        - `MANAGER`

        #### For assignment user to the organization's projects:

        A users with the `ADMINISTRATOR` and `MANAGER` roles can assign users to the organization.

        ### Response event statuses

        You will get different statuses for project assignments according to which user you want
        to assign to the organization.
      requestBody:
        content:
          application/json:
            schema:
              title: User Assignment Request
              allOf:
                - $ref: '#/components/schemas/OrganizationUserBase'
                - type: object
                  properties:
                    id:
                      type: integer
                      x-stoplight:
                        id: nvv8139j0n8wp
                      format: int64
                      minimum: 0
                      description: User's internal identifier.
                    projects:
                      type: array
                      items:
                        $ref: ../models/user/UserProjectInfo.yaml
                  required:
                    - id
        description: Definition for a user assignment.
      tags:
        - Organization User
        - Ready for implementation
  '/organizations/{org_id}/users/{user_id}':
    parameters:
      - $ref: '#/components/parameters/OrganizationId'
      - $ref: '#/components/parameters/UserId'
    get:
      summary: Get organization user profile
      tags:
        - Organization User
        - Ready for implementation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUserAccount'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-organizations-org_id-users-user_id
      description: |-
        Get organization user profile.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        A user with `MEMBER` role can get only his profile.

        ### Member authority:

        - `EDITOR`
        - `VIEWER`
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/PatchOperation.yaml
    put:
      summary: Update organization user details
      operationId: put-organizations-org_id-users-user_id
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              title: Org User Update Request
              allOf:
                - $ref: '#/components/schemas/OrganizationUserBase'
                - type: object
                  properties:
                    projects:
                      type: array
                      items:
                        $ref: ../models/user/UserProjectInfo.yaml
        description: Provide organization's user information for update.
      tags:
        - Organization User
        - Ready for implementation
      description: |-
        Update organization user details.

        Organization user details for update.

        ### Organization authority:

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        ### Project authority:

        - `EDITOR`
    patch:
      summary: Partial organization user update
      operationId: patch-organizations-org_id-users-user_id
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: |-
        Partial organization user update.

        You can provide a project list as an additional option for assigning or unassigned
        a user from projects.

        ### Organization authority:

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        ### Project authority:

        - `EDITOR`
      tags:
        - Organization User
        - Ready for implementation
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: ../models/PatchOperation.yaml
    delete:
      summary: Unassigned organization user
      operationId: delete-organizations-org_id-users-user_id
      responses:
        '204':
          description: No Content
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: |-
        Unassigned user from an organization and all organization projects.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
      tags:
        - Organization User
        - Ready for implementation
  '/organizations/{org_id}/projects':
    parameters:
      - $ref: '#/components/parameters/OrganizationId'
    get:
      summary: Get organization projects
      tags:
        - Organization Project
        - Ready for implementation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationProjectsPage'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-organizations-org_id-projects
      parameters:
        - $ref: ../parameters/Pagination.yaml#/Limit
        - $ref: ../parameters/Pagination.yaml#/Offset
        - $ref: ../parameters/Pagination.yaml#/Order
        - schema:
            type: string
          in: query
          name: name
          description: Filter projects by containing name
        - schema:
            type: string
            pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
          in: query
          name: slug
          description: Filter projects by slug
        - schema:
            type: string
            default: name
          in: query
          name: sort
          description: Indicate sort by field
      description: |-
        Get a list of organization projects.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        ### Access level

        - `ADMINISTRATOR` - no restrictions.
        - `MANAGER` - no restrictions.
        - `MEMBER` - restricted to viewing only their assigned projects.
    post:
      summary: Create a new project
      tags:
        - Organization Project
        - Ready for implementation
      operationId: post-organizations-org_id-projects
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationProjectInfo'
        '400':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '409':
          $ref: '#/components/responses/Error'
      description: |-
        Create a new project in the organization. 

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/project/ProjectDetails.yaml
        description: 'You can create an project provide name and slug. If the `slug` is not provided, it will be generated from the `name`.'
  '/organizations/{org_id}/projects/{project_id}':
    parameters:
      - $ref: '#/components/parameters/OrganizationId'
      - $ref: '#/components/parameters/ProjectId'
    get:
      summary: Get project information
      tags:
        - Organization Project
        - Ready for implementation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/project/ProjectProfile.yaml
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-organizations-org_id-projects-project_id
      description: |-
        Get project information.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        A user with the `MEMBER` role can get only his project.

        ### Member authority:

        - 'EDITOR'
        - 'VIEWER'
    put:
      summary: Update project
      operationId: put-organizations-org_id-projects-project_id
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/project/ProjectDetails.yaml
      description: |-
        Update project information.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        A user with the `MEMBER` role can update only his project.

        ### Member authority:

        - `EDITOR`
      tags:
        - Organization Project
        - Ready for implementation
    patch:
      summary: Partial project update
      operationId: patch-organizations-org_id-projects-project_id
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: ../models/PatchOperation.yaml
        description: ''
      description: |-
        Partial project update.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        A user with the `MEMBER` role can update only his project.

        ### Member authority:

        - `EDITOR`
      tags:
        - Organization Project
        - Ready for implementation
    delete:
      summary: Delete project
      tags:
        - Organization Project
        - Ready for implementation
      operationId: delete-organizations-org_id-projects-project_id
      responses:
        '204':
          description: No Content
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: |-
        Delete project.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
  /organizations/searches:
    post:
      summary: Create search request for organizations
      operationId: post-organizations-searches
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationProfilesPage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: ../models/Problem.yaml
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: ../models/Problem.yaml
      description: |-
        Create search request for organizations by provided criteria.

        You can use the following attributes as a `search_criteria[*].filter_key` for filtering:

        - `name` - filter by organization name.
        - `slug` - filter by organization slug.
        - `type` - filter by organization type.
        - `created_at` - filter by creation date.
        - `updated_at` - filter by last update date.
        - `users` - filter by the number of users.
        - `projects` - filter by the number of projects.
        - `launches` - filter by the number of launches.
        - `last_launch_occurred` - filter by the last launch occurrence.
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/SearchCriteriaRQ.yaml
        description: ''
      tags:
        - Organization
        - Ready for implementation
      x-extension-authority:
        - ReportPortal: User
        - ReportPortal: Admin
  /organizations/{org_id}/projects/searches:
    parameters:
      - $ref: '#/components/parameters/OrganizationId'
    post:
      summary: Create search request for organization projects
      operationId: post-organizations-org_id-projects-searches
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationProjectsPage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: ../models/Problem.yaml
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: ../models/Problem.yaml
      description: |-
        Create search request for organization projects by provided criteria.

        You can use the following attributes as a `search_criteria[*].filter_key` for filtering:

        - `name` - filter by project name.
        - `slug` - filter by project slug.
        - `key` - filter by project key.
        - `created_at` - filter by creation date.
        - `updated_at` - filter by last update date.
        - `users` - filter by the number of users.
        - `launches` - filter by the number of launches.
        - `last_launch_occurred` - filter by the last launch occurrence.
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/SearchCriteriaRQ.yaml
      tags:
        - Organization Project
        - Ready for implementation
components:
  schemas:
    OrganizationProfilesPage:
      title: OrganizationProfilesPage
      allOf:
        - $ref: ../models/Offset.yaml
        - $ref: '#/components/schemas/OrganizationProfilesList'
    OrganizationProfilesList:
      title: List of organization profiles
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationProfile'
      type: object
    OrganizationProfile:
      title: Organization profile
      description: A comprehensive set of organization information.
      allOf:
        - $ref: '#/components/schemas/OrganizationInfo'
        - $ref: '#/components/schemas/OrganizationRelation'
    OrganizationInfo:
      title: Organization
      description: Various information about the organization information.
      allOf:
        - $ref: '#/components/schemas/OrganizationDetails'
        - $ref: '#/components/schemas/OrganizationMetadata'
    OrganizationDetails:
      title: Organization definition
      description: |
        Basic information provided by the client.

        A `slug` is a unique identifying part of an organization. Generated according to the organization name if not specified by the user.
      type: object
      properties:
        name:
          type: string
          description: Organization display name.
          minLength: 3
          maxLength: 60
          pattern: '^[A-Za-z0-9._\- ]+$'
        slug:
          type: string
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
          minLength: 3
          maxLength: 60
          description: 'A slug is used to identify a resource. It should be unique and contain only lowercase letters, numbers, and hyphens. It should not start or end with a hyphen.'
          nullable: true
      required:
        - name
    OrganizationMetadata:
      title: Organization metadata
      description: Organization metadata. Represent generated fields.
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Organization ReportPortal identifier.
          minimum: 0
        type:
          type: string
          enum:
            - INTERNAL
            - PERSONAL
            - EXTERNAL
          description: |-
            Type for automatization purposes.

            There are three types:
            - INTERNAL: created by API request.
            - PERSONAL: created for a user after the user creating. Only Enterprise edition feature.
            - EXTERNAL: created for external integrations.
        external_id:
          type: string
          description: |-
            External organization identifier.
            It is created for integration.
        created_at:
          type: string
          format: date-time
          description: Creation date.
        updated_at:
          type: string
          format: date-time
          description: Last update date.
    OrganizationRelation:
      title: Organization relations
      type: object
      description: |-
        A relationship object contains members that represent a relationship of the organization.

        Represents [JSON:API relationships object](https://jsonapi.org/format/#document-resource-object-relationships). We use only `links` and `meta` objects.
      properties:
        relationships:
          type: object
          properties:
            users:
              type: object
              description: General information about the organization users.
              properties:
                meta:
                  type: object
                  properties:
                    count:
                      type: integer
                      minimum: 0
                      description: Total count of users in the organization.
            projects:
              type: object
              description: General information about the organization projects.
              properties:
                meta:
                  type: object
                  properties:
                    count:
                      type: integer
                      minimum: 0
                      description: Total count of projects in the organization.
            launches:
              type: object
              description: General information about the organization launches.
              properties:
                meta:
                  type: object
                  properties:
                    last_occurred_at:
                      type: string
                      format: date-time
                      description: Last launch occurrence date.
                    count:
                      type: integer
                      minimum: 0
                      description: |-
                        Total count of launches in the organization.
                        Access: Admin, Manager
            billing:
              type: object
              description: |-
                General information about the organization billing.
                Available only if a Billing plugin is enabled.
              properties:
                meta:
                  type: object
                  properties:
                    plan_name:
                      type: string
                      description: Plan name.
                    storage_usage:
                      type: integer
                      minimum: 0
                      description: Storage usage in percents.
                      maximum: 100
    OrganizationUsersPage:
      title: List of organization users
      allOf:
        - $ref: ../models/Offset.yaml
        - $ref: '#/components/schemas/OrganizationUsersList'
    OrganizationUsersList:
      title: OrganizationUsersList
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationUserAccount'
      required:
        - items
    OrganizationUserAccount:
      title: Organization user account
      allOf:
        - $ref: ../models/user/UserAccount.yaml
        - $ref: '#/components/schemas/OrganizationUserBase'
        - $ref: '#/components/schemas/OrganizationUserMetadata'
        - $ref: '#/components/schemas/OrganizationUserRelation'
      description: A comprehensive set of user information related to a user's organization.
    OrganizationUserBase:
      $ref: ../models/user/UserOrgRole.yaml
    OrganizationUserMetadata:
      title: Organization user metadata
      allOf:
        - properties:
            assigned_at:
              type: string
              format: date-time
              description: |-
                A time when a user was assigned to
                the organization.
      description: User's organization metadata. Represent generated fields.
      type: object
    OrganizationUserRelation:
      title: Organization user relations
      type: object
      description: |-
        A relationship object contains members that represent a relationship of the user in the organization.

        Represents [JSON:API relationships object](https://jsonapi.org/format/#document-resource-object-relationships). We use only `links` and `meta` objects.
      properties:
        relationships:
          type: object
          properties:
            projects:
              type: object
              description: User's projects relations.
              properties:
                meta:
                  type: object
                  description: User's projects relation metadata.
                  properties:
                    count:
                      type: integer
                      minimum: 0
                      description: |-
                        Total number of user's projects in
                        organization.
    OrganizationProjectsPage:
      title: List of organization projects
      allOf:
        - $ref: ../models/Offset.yaml
        - $ref: '#/components/schemas/OrganizationProjectsList'
    OrganizationProjectsList:
      title: OrganizationProjectsList
      type: object
      properties:
        items:
          type: array
          items:
            $ref: ../models/project/ProjectProfile.yaml
      required:
        - items
    OrganizationProjectInfo:
      title: OrganizationProjectInfo
      allOf:
        - $ref: ../models/project/ProjectMetadata.yaml
        - $ref: ../models/project/ProjectDetails.yaml
  parameters:
    OrganizationId:
      name: org_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
      description: Organization identifier.
    UserId:
      name: user_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
      description: User identifier.
    ProjectId:
      name: project_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
      description: Project identifier.
  securitySchemes:
    $ref: ../security/BearerAuth.yaml
  responses:
    Update:
      description: Successful update response
      content:
        application/json:
          schema:
            title: Successful update
            type: object
            properties:
              message:
                type: string
                example: The update was completed successfully.
    Error:
      description: Error response
      content:
        application/json:
          schema:
            $ref: ../models/Problem.yaml
security:
  - BearerAuth: []
tags:
  - name: Organization
    description: Organizations collection
  - name: Organization Project
    description: Organization projects collection
  - name: Organization User
    description: Organization users collection
  - name: In progress
    description: Endpoints that are in designing
  - name: Ready for implementation
    description: Endpoints that are ready for development
  - name: Implemented
    description: Endpoints that are implemented

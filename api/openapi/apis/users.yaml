openapi: 3.0.3
info:
  title: Users API
  version: Organization
  description: API Collection for working with users.
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  contact:
    name: Reingold Shekhtel
    email: reingold_shekhtel@epam.com
servers:
  - url: '{protocol}://{authority}/{basePath}'
    description: ReportPortal server
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
        description: Protocol
      authority:
        default: demo.reportportal.io
        description: Host name and port (if needed) of Report Portal server
      basePath:
        default: api
        description: Base path of Report Portal API
paths:
  /invitations:
    post:
      summary: Create user invitation
      operationId: post-invitations
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '503':
          description: Service Unavailable
      description: Create and send user invitation to email.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationRequest'
        description: ''
      tags:
        - Invitation
    get:
      summary: Get invitations
      operationId: get-invitations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationPage'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      parameters:
        - $ref: ../parameters/Offset.yaml
        - $ref: ../parameters/Limit.yaml
        - $ref: ../parameters/Order.yaml
        - schema:
            type: string
            default: email
          in: query
          name: sort
        - schema:
            type: string
            format: email
          in: query
          name: email
      description: Get all invitations
      tags:
        - Invitation
  '/invitations/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get invitation
      tags:
        - Invitation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      operationId: get-invitations-id
      description: Get invitation by ID.
    put:
      summary: Activate invitation
      operationId: put-invitations-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Create user from invitation.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationActivation'
        description: ''
      tags:
        - Invitation
  /users:
    get:
      summary: Your GET endpoint
      tags:
        - User
      responses: {}
      operationId: get-users
      description: ''
      parameters:
        - $ref: ../parameters/Offset.yaml
        - $ref: ../parameters/Limit.yaml
        - $ref: ../parameters/Order.yaml
    post:
      summary: ''
      operationId: post-users
      responses:
        '200':
          description: OK
  /users/searches:
    post:
      summary: ''
      operationId: post-users-searches
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/SearchCriteriaRQ.yaml
      tags:
        - User
  /users/me:
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-users-me
  '/users/{user_id}':
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-users-user_id
      description: ''
    put:
      summary: ''
      operationId: put-users-user_id
      responses:
        '200':
          description: OK
    patch:
      summary: ''
      operationId: patch-users-user_id
      responses:
        '200':
          description: OK
    delete:
      summary: ''
      operationId: delete-users-user_id
      responses:
        '200':
          description: OK
  '/users/{user_id}/api-keys':
    parameters:
      - schema:
          type: string
        name: user_id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags:
        - ApiKey
        - User
      responses: {}
      operationId: get-users-user_id-api-keys
    post:
      summary: ''
      operationId: post-users-user_id-api-keys
      responses:
        '200':
          description: OK
  '/users/{user_id}/api-keys/{key_id}':
    parameters:
      - $ref: '#/components/parameters/userId'
      - schema:
          type: string
        name: key_id
        in: path
        required: true
    delete:
      summary: ''
      operationId: delete-users-user_id-api-keys-key_id
      responses:
        '200':
          description: OK
      tags:
        - User
        - ApiKey
  '/users/{user_id}/password':
    parameters:
      - schema:
          type: string
        name: user_id
        in: path
        required: true
    put:
      summary: ''
      operationId: put-users-user_id-password
      responses:
        '200':
          description: OK
      tags:
        - Password
        - User
      description: ''
    patch:
      summary: ''
      operationId: patch-users-user_id-password
      responses:
        '200':
          description: OK
  /password-reset-requests:
    post:
      summary: Create password reset request
      operationId: post-password-reset-requests
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '403':
          description: Forbidden
      tags:
        - Password
        - User
      description: ''
    parameters: []
components:
  schemas:
    Invitation:
      title: Invitation
      type: object
      properties:
        id:
          type: string
          description: Invitation identifier.
          format: uuid
        user_id:
          type: integer
          format: int64
          description: User identifier. For activated users only.
        email:
          type: string
          description: User's email.
        status:
          type: string
          enum:
            - PENDING
            - ACTIVATED
          description: User invitations status.
        link:
          type: string
          description: Link to invitation form.
        created_at:
          type: string
          format: date-time
          description: Creation date.
        expires_at:
          type: string
          format: date-time
          description: Expiration date.
    Invitations:
      title: Invitations list
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Invitation'
    InvitationPage:
      title: Invitation page
      allOf:
        - $ref: ../models/Offset.yaml
        - $ref: '#/components/schemas/Invitations'
    InvitationRequest:
      title: Invitation creation request
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email for invitation.
        organizations:
          type: array
          description: Organizations to assign a user.
          items:
            $ref: ../models/user/UserOrgInfoWithProjects.yaml
      required:
        - email
    InvitationActivation:
      title: Invitation activation request
      type: object
      properties:
        status:
          type: string
          enum:
            - ACTIVATED
          description: Change status to ACTIVATED to create a user.
          default: ACTIVATED
        email:
          type: string
          description: New email.
          format: email
        full_name:
          type: string
          description: User full name.
          maxLength: 60
        password:
          type: string
          format: password
          description: |-
            User password. Will be ignored for `PENDING` status.
            Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character.
          minLength: 8
          maxLength: 256
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).+$'
      required:
        - password
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  parameters:
    userId:
      name: user_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
        minimum: 0
      description: User identifier
tags:
  - name: ApiKey
  - name: Implemented
  - name: In progress
  - name: Invitation
  - name: Password
  - name: Ready for implementation
  - name: User
security:
  - BearerAuth: []

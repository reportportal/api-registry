openapi: 3.0.3
info:
  title: Users API
  version: Organization
  description: API Collection for working with users.
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  contact:
    name: Reingold Shekhtel
    email: reingold_shekhtel@epam.com
servers:
  - url: '{host}{basePath}'
    description: ReportPortal server
    variables:
      host:
        default: https://demo.reportportal.io
        description: Host name and port (if needed) of Report Portal server
      basePath:
        default: /api
        description: Base path of Report Portal API
paths:
  /invitations:
    post:
      summary: Create user invitation
      operationId: post-invitations
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '503':
          $ref: '#/components/responses/Error'
      description: |-
        Create and send user invitation to email.

        We can create invitations for new users or for existing users.

        We don't update existing users, only assign them to new organizations and projects.

        ### Authority

        - `ADMINISTRATOR`
        - `USER`
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationRequest'
      tags:
        - Invitation
    get:
      summary: Get invitations
      operationId: get-invitations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
      parameters:
        - $ref: ../parameters/Offset.yaml
        - $ref: ../parameters/Limit.yaml
        - $ref: ../parameters/Order.yaml
        - schema:
            type: string
            default: email
          in: query
          name: sort
          description: Indicate sort by field.
        - schema:
            type: string
            format: email
          in: query
          name: email
          description: Filter invitations by email.
      description: |-
        Get all invitations

        ### Authority

        - `ADMINISTRATOR`
      tags:
        - Invitation
  '/invitations/{invitation_id}':
    parameters:
      - schema:
          type: string
        name: invitation_id
        in: path
        required: true
    get:
      summary: Get invitation
      tags:
        - Invitation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
      operationId: get-invitations-id
      description: |-
        Get invitation by ID.

        ### Authority

        - `ADMINISTRATOR`
        - `USER`
    put:
      summary: Activate invitation
      operationId: put-invitations-id
      description: |-
        Activate user invitation.

        ### Authority

        - `PUBLIC`
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationActivation'
        description: Details for user activation.
      tags:
        - Invitation
  /users:
    get:
      summary: Get all users
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceUserPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
      operationId: get-users
      description: |-
        Get all users.

        ### Export users

        You can export users as a CSV list to provide `Accept: text/csv`.

        ### Authority

        - `ADMINISTRATOR`
      parameters:
        - $ref: ../parameters/ExcludeFields.yaml
        - $ref: ../parameters/Offset.yaml
        - $ref: ../parameters/Limit.yaml
        - $ref: ../parameters/Order.yaml
        - schema:
            type: string
            enum:
              - application/json
              - text/csv
            default: application/json
          in: header
          name: Accept
          description: Indicate response format. Use `text/csv` to export users.
        - schema:
            type: string
            default: full_name
          in: query
          name: sort
          description: Indicate sort by field.
        - schema:
            type: string
            format: email
          in: query
          name: email
          description: Filter users by email.
        - schema:
            type: string
            format: uuid
          in: query
          name: uuid
          description: Filter users by uuid.
        - schema:
            type: string
          in: query
          name: external_id
          description: Filter users by  external id.
        - schema:
            type: string
          in: query
          name: full_name
          description: Filter users by full name containing (case insensitive).
        - schema:
            $ref: ../enums/instanceRole.yaml
          in: query
          name: instance_role
          description: Filter users by role.
        - schema:
            $ref: ../enums/accountType.yaml
          in: query
          name: account_type
          description: Filter users by account type.
    post:
      summary: Create a new user
      operationId: post-users
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceUser'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '409':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserRequest'
      description: |-
        Create a new user

        ### Authority

        - `ADMINISTRATOR`
      tags:
        - User
  /users/searches:
    post:
      summary: Create search request for users
      operationId: post-users-searches
      tags:
        - User
      description: |-
        Search users by criteria.

        You can use the following attributes as a `search_criteria[*].filter_key`:

        - `uuid` - filter by user UUID.
        - `external_id` - filter by user external identifier.
        - `email` - filter by user email.
        - `full_name` - filter by user full name.
        - `account_type` - filter by account type.
        - `instance_role` - filter by user role in the instance.
        - `active` - filter by user activity.
        - `created_at` - date when a user was created.
        - `updated_at` - date when a user was updated.
        - `org_id` - search by organization id.

        ### Authority

        - `ADMINISTRATOR`

        ### Access level

        #### ADMINISTRATOR

        - Filter by all attributes.
        - Use all operations.
        - Get a full user profile.
      parameters:
        - schema:
            type: string
            enum:
              - application/json
              - text/csv
            default: application/json
          in: header
          name: Accept
          description: Indicate response format. Use `text/csv` to export users.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceUserPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/SearchCriteriaRQ.yaml
        description: Create search request for user collection.
  /users/me:
    get:
      summary: Get current user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceUser'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
      operationId: get-users-me
      description: |-
        Get current user information.

        ### Authority

        - `ADMINISTRATOR`
        - `USER`

        ### Access level

        - Current user
      tags:
        - User
      parameters:
        - $ref: ../parameters/ExcludeFields.yaml
  '/users/{user_id}':
    parameters:
      - $ref: ../parameters/UserId.yaml
    get:
      summary: Get user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceUser'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-users-user_id
      description: |-
        Get user by ID.

        ### Authority

        - `ADMINISTRATOR`
        - `USER`

        ### Access level

        - Administrator has access to any user profile
        - User has access only to his profile
      tags:
        - User
      parameters:
        - $ref: ../parameters/ExcludeFields.yaml
    put:
      summary: Update user
      description: |-
        Update user base information.

        ### Authority

        - `ADMINISTRATOR`
        - `USER`

        ### Access level

        - Administrator has access to any user profile
        - User has access only to his profile
      operationId: put-users-user_id
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/user/UserBase.yaml
      tags:
        - User
    delete:
      summary: Delete user
      operationId: delete-users-user_id
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: |-
        Delete user by ID.

        ### Authority

        - `ADMINISTRATOR`
        - `USER`

        ### Access level

        - Administrator has access to any user profile
        - User has access only to his profile
      tags:
        - User
  '/users/{user_id}/api-keys':
    parameters:
      - $ref: ../parameters/UserId.yaml
    get:
      summary: Get user's API keys
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-users-user_id-api-keys
      parameters:
        - $ref: ../parameters/Limit.yaml
        - $ref: ../parameters/Offset.yaml
        - $ref: ../parameters/Order.yaml
        - schema:
            type: string
          in: query
          name: name
          description: Get a key by name
      description: |-
        Retrieve list of user's Api Keys

        ### Authority

        - `ADMINISTRATOR`
        - `USER`

        ### Access level

        - Administrator has access to any user api keys
        - User has access only to his api keys
    post:
      summary: Create an API key
      operationId: post-users-user_id-api-keys
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyCreateResponse'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyCreateRequest'
      description: |-
        Create an API key for the user

        ### Access level

        - Administrator has access to any user api keys
        - User has access only to his api keys
      tags:
        - User
  '/users/{user_id}/api-keys/{key_id}':
    parameters:
      - $ref: ../parameters/UserId.yaml
      - schema:
          type: integer
          minimum: 0
        name: key_id
        in: path
        required: true
        description: Key identifier.
    delete:
      summary: Delete the API Key
      operationId: delete-users-user_id-api-keys-key_id
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      tags:
        - User
      description: |-
        Delete the API key by ID

        ### Authority

        - `ADMINISTRATOR`
        - `USER`

        ### Access level

        - Administrator has access to any user api keys
        - User has access only to his api keys
  '/users/{user_id}/avatar':
    parameters:
      - $ref: ../parameters/UserId.yaml
    get:
      summary: Get user avatar
      operationId: get-users-user_id-avatar
      description: |-
        Get user avatar

        ### Authority

        - `ADMINISTRATOR`
        - `USER`

        ### Access level

        - Administrator get access to any user avatar
        - User get access to any user avatar
      tags:
        - User
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: boolean
            default: false
          in: query
          name: thumbnail
          description: Get a thumbnail image
      responses:
        '200':
          description: Avatar retrieved successfully
          content:
            image/png:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
    post:
      summary: Upload user avatar
      operationId: post-users-user_id-avatar
      description: |-
        Upload user avatar

        ### Authority

        - `ADMINISTRATOR`
        - `USER`

        ### Access level

        - Administrator get access to any user avatar
        - User get access only to their avatar
      tags:
        - User
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '201':
          description: Avatar uploaded successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      summary: Delete user avatar
      operationId: delete-users-user_id-avatar
      description: |-
        Delete user avatar

        ### Authority

        - `ADMINISTRATOR`
        - `USER`

        ### Access level

        - Administrator get access to any user avatar
        - User get access only to their avatar
      tags:
        - User
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Avatar deleted successfully
        '400':
          $ref: '#/components/responses/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Avatar not found
  '/users/{user_id}/password':
    parameters:
      - $ref: ../parameters/UserId.yaml
    put:
      summary: Update User password
      operationId: put-users-user_id-password
      responses:
        '501':
          $ref: '#/components/responses/Update'
      tags:
        - User
      description: Update user password.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserPassword'
    post:
      summary: Recover user password
      operationId: post-users-user_id-password
      responses:
        '501':
          description: Not Implemented
      description: |-
        Recover User password

        ### Authority

        - `PUBLIC`
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestoreUserPassword'
      security: []
      tags:
        - User
  /password-recover-requests:
    post:
      summary: Create password recover request
      operationId: post-password-reset-requests
      security: []
      responses:
        '501':
          description: Not Implemented
      tags:
        - User
      description: |-
        Create password recover request. Send email with recover token and user ID.

        ### Authority

        - `PUBLIC`
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestorePasswordRequest'
    parameters: []
components:
  schemas:
    Invitation:
      title: Invitation
      type: object
      description: |-
        Invitation information.

        Invitation status can be `PENDING` or `ACTIVATED`.
      properties:
        id:
          type: string
          description: Invitation identifier.
          format: uuid
        user_id:
          $ref: ../types/userId.yaml
        full_name:
          $ref: ../types/name.yaml
        email:
          type: string
          description: User's email.
          format: email
        status:
          $ref: ../enums/invitationStatus.yaml
        link:
          type: string
          description: Link to invitation form.
          format: uri
        created_at:
          type: string
          format: date-time
          description: Creation date.
        expires_at:
          type: string
          format: date-time
          description: Expiration date.
      required:
        - id
        - email
        - status
    InvitationPage:
      title: Invitation page
      allOf:
        - $ref: ../models/Offset.yaml
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Invitation'
    InvitationRequest:
      title: Invitation creation request
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email for invitation.
        organizations:
          type: array
          description: Organizations to assign a user.
          items:
            allOf:
              - $ref: ../models/user/UserOrgInfo.yaml
              - type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: ../models/user/UserProjectInfo.yaml
      required:
        - email
    InvitationActivation:
      title: Invitation activation request
      type: object
      description: |-
        Minimum eight characters, at least one uppercase letter,
        one lowercase letter, one number and one special character.
      properties:
        status:
          type: string
          enum:
            - ACTIVATED
          description: Change status to ACTIVATED to create a user.
        full_name:
          $ref: ../types/name.yaml
        password:
          $ref: ../types/password.yaml
      required:
        - status
        - full_name
        - password
    ApiKey:
      title: API Key
      type: object
      description: Common info of the API Key.
      properties:
        id:
          type: integer
          description: Internal identifier
        name:
          type: string
          description: API Key unique name
        user_id:
          type: integer
          description: API Key owner
        created_at:
          type: string
          format: date-time
          description: Date time with milliseconds
        last_used_at:
          type: string
          format: date-time
          description: Date time with milliseconds
    ApiKeyCreateRequest:
      title: API Key creation request
      type: object
      properties:
        name:
          type: string
          description: Unique name for the new API key
      required:
        - name
    ApiKeyCreateResponse:
      allOf:
        - $ref: '#/components/schemas/ApiKey'
        - type: object
          properties:
            api_key:
              type: string
              description: The generated API key
          required:
            - api_key
      title: API Key creation response
    ApiKeyPage:
      title: API Key page
      allOf:
        - $ref: ../models/Offset.yaml
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/ApiKey'
    NewUserRequest:
      title: User creation request
      allOf:
        - $ref: ../models/user/UserBase.yaml
        - type: object
          properties:
            password:
              $ref: ../types/password.yaml
      description: New user creation
    InstanceUser:
      title: Instance User
      allOf:
        - $ref: ../models/user/UserInfo.yaml
        - type: object
          properties:
            stats:
              $ref: '#/components/schemas/InstanceUserStats'
            organizations:
              type: array
              maxItems: 100
              uniqueItems: true
              items:
                $ref: '#/components/schemas/InstanceUserOrgDetails'
    InstanceUserStats:
      title: Instance User statistics
      type: object
      properties:
        org_stats:
          type: object
          properties:
            total_count:
              type: integer
              description: Total number of user's organisations
    InstanceUserOrgDetails:
      title: Instance User organization details
      description: User's organization details.
      allOf:
        - $ref: ../models/user/UserOrgInfo.yaml
        - $ref: ../models/org/OrganizationBase.yaml
    InstanceUserPage:
      title: Instance User page
      allOf:
        - $ref: ../models/Offset.yaml
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/InstanceUser'
      description: Page with full user information. Only for current user or administrator.
    UserInfoPage:
      title: User info page
      allOf:
        - $ref: ../models/Offset.yaml
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: ../models/user/UserInfo.yaml
      description: Page with general user information. For all users.
    NewUserPassword:
      title: New User password
      type: object
      properties:
        old_password:
          type: string
          format: password
          description: Old user password.
        new_password:
          $ref: ../types/password.yaml
      required:
        - old_password
        - new_password
      description: Change user password.
    RestoreUserPassword:
      title: Restore User password
      type: object
      properties:
        token:
          type: string
          format: uuid
          description: Token for password recovery. It's provided in email.
        new_password:
          $ref: ../types/password.yaml
      required:
        - token
        - new_password
    RestorePasswordRequest:
      title: Restore password request
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email for password recovery.
      required:
        - email
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  responses:
    Update:
      description: Successful update response
      content:
        application/json:
          schema:
            title: Successful update
            type: object
            properties:
              message:
                type: string
                example: The update was completed successfully.
    Error:
      description: Error problem response
      content:
        application/problem+json:
          schema:
            $ref: ../models/Problem.yaml
tags:
  - name: Implemented
    description: Implemented
  - name: Invitation
    description: Invitation API collection
  - name: User
    description: User API collection
security:
  - BearerAuth: []

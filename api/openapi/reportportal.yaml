openapi: 3.0.3
info:
  title: ReportPortal API
  version: 5.12.0
  description: |+
    ![reportportal-logo](https://reportportal.io/docs/img/logo.svg)

    This is the API documentation for ReportPortal. We describe this documentation
    following our [API Principles](https://github.com/reportportal/reportportal-common-api/blob/main/docs/api-principles.md)
    and [RESTful API Guidelines](https://opensource.zalando.com/restful-api-guidelines/).

    Because this documentation is created according to the
    [API design first approach](https://swagger.io/resources/articles/adopting-an-api-first-approach/),
    it doesn't contain information about all existing endpoints. There are only pre-designed endpoints.
    If you want to see the full documentation, you can check
    the [Auto-generated API documentation](https://reportportal.io/docs/category/api/service-api).

    # Introduction

    ReportPortal is a service for continuous testing.
    It provides a platform for test automation and allows you to analyze
    the results of tests in various ways. The service is implemented as a web
    application and is available through a web interface or API.

    # Authentication

    ReportPortal uses the [JWT](https://jwt.io/) authentication protocol for UI client requests and
    the [API Key](https://reportportal.io/docs/reportportal-configuration/HowToGetAnAccessTokenInReportPortal/#2-authorization-with-users-api-key-for-agents)
    for agent requests.

    Both approaches use the same security scheme: `Bearer`.

  contact:
    name: ReportPortal Team
    email: support@reportportal.io
servers:
  - url: '{protocol}://{authority}/{basePath}'
    description: ReportPortal server
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
        description: Protocol
      authority:
        default: demo.reportportal.io
        description: Host name and port (if needed) of Report Portal server
      basePath:
        default: api
        description: Base path of Report Portal API
security:
  - BearerAuth: []
paths:
  '/users/{user_id}/api-keys':
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      summary: Get user's API Keys
      tags:
        - User API Keys
      operationId: get-user-api-keys
      description: Retrieve list of user's Api Keys
      responses:
        '200':
          description: List of user api keys
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiKeyMetadata'
        '404':
          description: User Not Found
    post:
      summary: Create user's API key
      operationId: post-users-user_id-api-keys
      tags:
        - User API Keys
      description: Create Api key for user keys collection
      responses:
        '201':
          description: Api key created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
  '/users/{user_id}/api-keys/{key_id}':
    parameters:
      - $ref: '#/components/parameters/UserId'
      - schema:
          type: string
        name: key_id
        in: path
        required: true
    delete:
      summary: Delete user's API key
      operationId: delete-users-user_id-api-keys-key_id
      tags:
        - User API Keys
      description: Delete Api key from user keys collection by id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /activities/searches:
    parameters: []
    post:
      summary: Search activities by complex criteria
      operationId: activities-search
      description: 'This is a [GET with body payload](https://opensource.zalando.com/restful-api-guidelines/#get-with-body) that doesn''''t create resources. It returns all activities matching the query passed as the request input payload.'
      tags:
        - Activities
      parameters:
        - schema:
            type: string
          in: query
          name: limit
          description: The limit used for this page of results. This will be the same as the limit query parameter unless it exceeded the maximum value allowed for this API endpoint
        - schema:
            type: string
          in: query
          name: offset
          description: The offset used for this page of results
        - schema:
            type: string
          in: query
          name: sort
          description: Indicate sort by field
        - schema:
            type: string
            enum:
              - ASC
              - DESC
          in: query
          name: order
          description: Indicate sorting direction
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                search_criterias:
                  type: array
                  items:
                    $ref: '#/components/schemas/SearchCriteria'
              required:
                - search_criterias
            examples:
              Example 1:
                value:
                  search_criterias:
                    - filter_key: predefinedFilter
                      value: test
                    - filter_key: projectName
                      operation: EQ
                      value: test
                    - filter_key: eventName
                      operation: IN
                      value: 'createDashboard,deleteWidget'
                    - filter_key: createdAt
                      operation: BTW
                      value: 0;1440;+0300
                    - filter_key: objectType
                      operation: IN
                      value: 'DEFECT_TYPE,LAUNCH'
                    - filter_key: objectName
                      operation: CNT
                      value: test
                    - filter_key: subjectType
                      operation: IN
                      value: 'USER,RULE'
                    - filter_key: subjectName
                      operation: IN
                      value: 'superadmin,user'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./models/Offset.yaml
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Activity'
  '/v1/project/{project_name}/suggestions':
    get:
      summary: Get project suggestions
      tags:
        - Projects
        - Suggestions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      suggestions:
                        type: array
                        x-stoplight:
                          id: j4b0g6yz7qzhk
                        description: List of suggestions for the project
                        items:
                          x-stoplight:
                            id: xw9kqvns5x1uk
                          type: string
                  - $ref: ./models/Limit.yaml
        '404':
          description: Not Found
      operationId: get-project-suggestions
      parameters:
        - schema:
            type: string
            enum:
              - activity_subject_name
          in: query
          name: type
          description: Type of suggestions
          required: true
        - schema:
            type: string
          in: query
          name: filter
          description: Filter query for suggestions
        - schema:
            type: integer
          in: query
          name: limits
          description: Maximum number of suggestions
      description: |-
        Get project suggestions by type for autocomplete.
        Supported types:
        - activity_subject_name: Get suggestions for activity subject names in the project.
    parameters:
      - schema:
          type: string
        name: project_name
        in: path
        required: true
        description: Project name
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ApiKeyMetadata:
      title: API Key metadata
      type: object
      description: ReportPortal only stores metadata and a hash of the API Key.
      properties:
        id:
          type: integer
          description: Internal identifier
        name:
          type: string
          description: API Key unique name
        user_id:
          type: integer
          description: API Key owner
        created_at:
          type: string
          format: date-time
          description: Date time with milliseconds
          example: '2019-07-30T06:43:40.252Z'
        last_used_at:
          type: string
          format: date-time
          example: '2019-07-30T06:43:40.252Z'
          description: Date time with milliseconds
    ApiKey:
      title: API Key
      description: 'Generated API key, granted once after creation.'
      allOf:
        - $ref: '#/components/schemas/ApiKeyMetadata'
        - type: object
          properties:
            api_key:
              type: string
              description: Generated API Key
    Activity:
      title: Activity
      type: object
      description: activity details
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        created_at:
          type: string
          format: date-time
        event_name:
          type: string
        object_id:
          type: integer
          exclusiveMinimum: false
          exclusiveMaximum: false
          format: int64
          minimum: 1
        object_name:
          type: string
        object_type:
          type: string
        project_id:
          type: integer
          format: int64
          exclusiveMinimum: false
          minimum: 1
        project_name:
          type: string
        subject_name:
          type: string
        subject_type:
          type: string
        details:
          type: object
          properties:
            history:
              type: array
              items:
                $ref: '#/components/schemas/HistoryField'
    HistoryField:
      title: HistoryField
      type: object
      properties:
        field:
          type: string
        old_value:
          type: string
        new_value:
          type: string
    SearchCriteria:
      title: SearchCriteria
      type: object
      properties:
        filter_key:
          type: string
          description: search by field
        operation:
          type: string
          enum:
            - EQ
            - NE
            - CNT
            - NON_CNT
            - BTW
            - IN
          description: operation to perform for the filter
        value:
          type: string
          description: search value
      required:
        - filter_key
        - value
  parameters:
    UserId:
      name: user_id
      in: path
      required: true
      schema:
        type: string
      description: User's ID
tags:
  - name: Activities
  - name: Organizations
  - name: Projects
  - name: Suggestions
  - name: User API Keys

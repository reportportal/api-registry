# !!!DO NOT EDIT IT DIRECTLY!!!
# This is an autogenerated file.
# Any changes made to this file will be overwritten.
# Please make changes to the source files and regenerate this file.
openapi: 3.0.3
info:
  title: ReportPortal API
  version: Organization
  description: >
    ![reportportal-logo](https://reportportal.io/docs/img/logo.svg)


    This is the API documentation for ReportPortal. We describe this
    documentation

    following our [API
    Principles](https://github.com/reportportal/reportportal-common-api/blob/main/docs/api-principles.md)

    and [RESTful API
    Guidelines](https://opensource.zalando.com/restful-api-guidelines/).


    Because this documentation is created according to the

    [API design first
    approach](https://swagger.io/resources/articles/adopting-an-api-first-approach/),

    it doesn't contain information about all existing endpoints. There are only
    pre-designed endpoints.

    If you want to see the full documentation, you can check

    the [Auto-generated API
    documentation](https://reportportal.io/docs/category/api/service-api).


    # Introduction


    ReportPortal is a service for continuous testing.

    It provides a platform for test automation and allows you to analyze

    the results of tests in various ways. The service is implemented as a web

    application and is available through a web interface or API.


    # Authentication


    ReportPortal uses the [JWT](https://jwt.io/) authentication protocol for UI
    client requests and

    the [API
    Key](https://reportportal.io/docs/reportportal-configuration/HowToGetAnAccessTokenInReportPortal/#2-authorization-with-users-api-key-for-agents)

    for agent requests.


    Both approaches use the same security scheme: `Bearer`.
  contact:
    name: ReportPortal Team
    email: support@reportportal.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: '{protocol}://{authority}/{basePath}'
    description: ReportPortal server
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
        description: Protocol
      authority:
        default: demo.reportportal.io
        description: Host name and port (if needed) of Report Portal server
      basePath:
        default: api
        description: Base path of Report Portal API
tags:
  - name: Activities
    description: API Collection for working with activities.
    x-displayName: Activities
  - name: Organizations
    description: API Collection for working with organizations.
    x-displayName: Organizations
  - name: Projects
    description: API Collection for working with projects.
    x-displayName: Projects
  - name: Suggestions
    description: API Collection for working with suggestions.
    x-displayName: Suggestions
  - name: User API Keys
    description: API Collection for working with user API keys.
    x-displayName: User API Keys
  - name: Groups
    x-displayName: Groups
  - name: Organization
    description: Organizations collection
    x-displayName: Organization
  - name: Organization Project
    description: Organization projects collection
    x-displayName: Organization Project
  - name: Organization User
    description: Organization users collection
    x-displayName: Organization User
  - name: Implemented
    description: Endpoints that are implemented
    x-displayName: Implemented
  - name: Invitation
    description: Invitation API collection
    x-displayName: Invitation
  - name: User
    description: User API collection
    x-displayName: User
paths:
  /groups:
    get:
      summary: Get all groups
      operationId: getGroups
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          description: Payment Required
        '403':
          description: Forbidden
      description: Get instance groups with optional filtering and sorting.
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Order'
        - schema:
            type: string
            default: name
          in: query
          name: sort
          description: Indicate sort by field.
      tags:
        - Groups
      security:
        - BearerAuth: []
    post:
      summary: Create a group
      operationId: createGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupInfo'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
        '403':
          description: Forbidden
        '409':
          description: Conflict
      description: |-
        Create a group.

        ### Authority

        - `ADMINISTRATOR`
      tags:
        - Groups
      security:
        - BearerAuth: []
  /groups/{group_id}:
    parameters:
      - $ref: '#/components/parameters/GroupId'
    get:
      summary: Get group
      operationId: getGroupById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupInfo'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Get a group by ID.
      tags:
        - Groups
      security:
        - BearerAuth: []
    put:
      summary: Update group
      operationId: updateGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupRequest'
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
      description: Update a group by ID.
      tags:
        - Groups
      security:
        - BearerAuth: []
    delete:
      summary: Delete group
      operationId: deleteGroup
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Delete a group by ID.
      tags:
        - Groups
      security:
        - BearerAuth: []
  /groups/{group_id}/users:
    parameters:
      - $ref: '#/components/parameters/GroupId'
    get:
      summary: Get all group users
      operationId: getGroupUsers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupUsersPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: Get all users of group.
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      tags:
        - Groups
      security:
        - BearerAuth: []
  /groups/{group_id}/users/{user_id}:
    parameters:
      - $ref: '#/components/parameters/GroupId'
      - $ref: '#/components/parameters/UserId'
    get:
      summary: Get group user
      operationId: getGroupUserById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupUserInfo'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: Get all users of group.
      tags:
        - Groups
      security:
        - BearerAuth: []
    delete:
      summary: Delete group user
      operationId: deleteUserFromGroupById
      description: Delete a user from a group.
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      tags:
        - Groups
      security:
        - BearerAuth: []
    put:
      summary: Add group user
      operationId: addUserToGroupById
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: Add user into group.
      tags:
        - Groups
      security:
        - BearerAuth: []
  /groups/{group_id}/projects:
    parameters:
      - $ref: '#/components/parameters/GroupId'
    get:
      summary: Get all group projects
      operationId: getGroupProjects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupProjectsPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: Get all projects of group.
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      tags:
        - Groups
      security:
        - BearerAuth: []
  /groups/{group_id}/projects/{project_id}:
    parameters:
      - $ref: '#/components/parameters/GroupId'
      - $ref: '#/components/parameters/ProjectId'
    get:
      summary: Get group project
      description: Get project of group.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupProjectInfo'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: getGroupProjectById
      tags:
        - Groups
      security:
        - BearerAuth: []
    put:
      summary: Add or update group project
      operationId: addProjectToGroupById
      description: Add or update project in group.
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                permission:
                  $ref: '#/components/schemas/projectRole'
      tags:
        - Groups
      security:
        - BearerAuth: []
    delete:
      summary: Delete group project
      operationId: deleteProjectFromGroupById
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: Delete project from group.
      tags:
        - Groups
      security:
        - BearerAuth: []
  /organizations:
    get:
      summary: Get a list of organizations
      tags:
        - Organization
        - Implemented
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
      operationId: get-organizations
      description: |-
        Get a list of existing organizations.

        ### Authority

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        ### Access level

        - `ADMINISTRATOR` - no restrictions.
        - `MANAGER` - limited to viewing only their assigned organizations.
        - `MEMBER` - limited to viewing only their assigned organizations.
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Order'
        - schema:
            type: string
          in: query
          name: name
          description: Filter organizations by name by substring.
        - schema:
            type: string
            pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
          in: query
          name: slug
          description: Filter organizations by slug.
        - schema:
            type: string
            default: name
          in: query
          name: sort
          description: Indicate sort by field.
      security:
        - BearerAuth: []
  /organizations/searches:
    post:
      summary: Create search request for organizations
      operationId: post-organizations-searches
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
      description: >
        Create search request for organizations by provided criteria.


        You can use the following attributes as a
        `search_criteria[*].filter_key` for filtering:


        - `name` - filter by organization name.

        - `slug` - filter by organization slug.

        - `type` - filter by organization type.

        - `created_at` - filter by creation date.

        - `updated_at` - filter by last update date.

        - `users` - filter by the number of users.

        - `projects` - filter by the number of projects.

        - `launches` - filter by the number of launches.

        - `last_launch_occurred` - filter by the last launch occurrence.


        ### Authority


        - `ADMINISTRATOR`
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchCriteriaRQ'
        description: Provide search criteria for organizations.
      tags:
        - Organization
        - Implemented
      security:
        - BearerAuth: []
  /organizations/{org_id}:
    get:
      summary: Get organization information
      tags:
        - Organization
        - Implemented
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationInfo'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-organizations-org_id
      description: |-
        Provide organization information.

        ### Authority

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`
      security:
        - BearerAuth: []
    parameters:
      - $ref: '#/components/parameters/organizationId'
  /organizations/{org_id}/users:
    parameters:
      - $ref: '#/components/parameters/organizationId'
    get:
      summary: Get organization's users
      tags:
        - Organization User
        - Implemented
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUsersPage'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-organizations-org_id-users
      description: |-
        Provides a list of organization's users.

        ### Authority

        - `ADMINISTRATOR`
        - `MANAGER`
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Order'
        - in: query
          name: sort
          description: Indicate sort by field.
          schema:
            type: string
            default: full_name
        - schema:
            type: string
          in: query
          name: full_name
          description: Filter users by full name containing (case insensitive).
      security:
        - BearerAuth: []
    post:
      summary: Assignment user to organization
      operationId: post-organizations-org_id-users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: User Assignment Response
                type: object
                properties:
                  message:
                    type: string
                    default: The user was added to the organization.
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      description: >-
        This is a endpoint that provides a flow for assigning a user to the
        organization.

        It can be used as a bulk endpoint if you provide a list of projects for
        assignment.


        ### Authority


        - `ADMINISTRATOR`

        - `MANAGER`


        ### Project authority


        - `ADMINISTRATOR`

        - `MANAGER`


        #### For assignment user to the organization's projects:


        A users with the `ADMINISTRATOR` and `MANAGER` roles can assign users to
        the organization.


        ### Response event statuses


        You will get different statuses for project assignments according to
        which user you want

        to assign to the organization.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgUserAssignment'
        description: Definition for a user assignment.
      tags:
        - Organization User
        - Implemented
      security:
        - BearerAuth: []
  /organizations/{org_id}/projects:
    parameters:
      - $ref: '#/components/parameters/organizationId'
    get:
      summary: Get organization projects
      tags:
        - Organization Project
        - Implemented
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationProjectsPage'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-organizations-org_id-projects
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Order'
        - schema:
            type: string
          in: query
          name: name
          description: Filter projects by containing name.
        - schema:
            type: string
            pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
          in: query
          name: slug
          description: Filter projects by slug.
        - schema:
            type: string
            default: name
          in: query
          name: sort
          description: Indicate sort by field.
      description: |-
        Get a list of organization projects.

        ### Authority

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        ### Access level

        - `ADMINISTRATOR` - no restrictions.
        - `MANAGER` - no restrictions.
        - `MEMBER` - restricted to viewing only their assigned projects.
      security:
        - BearerAuth: []
    post:
      summary: Create a new project
      tags:
        - Organization Project
        - Implemented
      operationId: post-organizations-org_id-projects
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectInfo'
        '400':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '409':
          $ref: '#/components/responses/Error'
      description: |-
        Create a new project in the organization. 

        ### Authority

        - `ADMINISTRATOR`
        - `MANAGER`
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectBase'
        description: >-
          You can create an project provide name and slug. If the `slug` is not
          provided, it will be generated from the `name`.
      security:
        - BearerAuth: []
  /organizations/{org_id}/projects/searches:
    parameters:
      - $ref: '#/components/parameters/organizationId'
    post:
      summary: Create search request for organization projects
      operationId: post-organizations-org_id-projects-searches
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationProjectsPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
      description: >-
        Create search request for organization projects by provided criteria.


        You can use the following attributes as a
        `search_criteria[*].filter_key` for filtering:


        - `name` - filter by project name.

        - `slug` - filter by project slug.

        - `key` - filter by project key.

        - `created_at` - filter by creation date.

        - `updated_at` - filter by last update date.

        - `users` - filter by the number of users.

        - `launches` - filter by the number of launches.

        - `last_launch_occurred` - filter by the last launch occurrence.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchCriteriaRQ'
      tags:
        - Organization Project
        - Implemented
      security:
        - BearerAuth: []
  /organizations/{org_id}/projects/{project_id}:
    parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/projectId'
    delete:
      summary: Delete project
      tags:
        - Organization Project
        - Implemented
      operationId: delete-organizations-org_id-projects-project_id
      responses:
        '204':
          description: No Content
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: |-
        Delete project.

        ### Authority

        - `ADMINISTRATOR`
        - `MANAGER`
      security:
        - BearerAuth: []
  /projects/{project_name}/groups:
    parameters:
      - schema:
          type: string
        name: project_name
        in: path
        required: true
        description: Project name.
    get:
      summary: Get all groups of project
      operationId: getGroupsOfProject
      tags:
        - Projects
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectGroupsPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: Get all groups of project.
      security:
        - BearerAuth: []
  /projects/{project_name}/groups/{group_id}:
    parameters:
      - schema:
          type: string
        name: project_name
        in: path
        required: true
        description: Project name.
      - $ref: '#/components/parameters/GroupId'
    get:
      summary: Get group by id
      description: Get group by id from project.
      operationId: getProjectGroupById
      tags:
        - Projects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectGroupInfo'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
    put:
      summary: Add or update group to project
      description: Add or update group to project with permission.
      operationId: AddGroupToProjectById
      tags:
        - Projects
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                permission:
                  $ref: '#/components/schemas/projectRole'
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
    delete:
      summary: Delete group from project by id
      description: Delete group from project by id.
      operationId: DeleteGroupFromProjectById
      tags:
        - Projects
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
  /invitations:
    post:
      summary: Create user invitation
      operationId: post-invitations
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '503':
          $ref: '#/components/responses/Error'
      description: >-
        Create and send user invitation to email.


        We can create invitations for new users or for existing users.


        We don't update existing users, only assign them to new organizations
        and projects.


        ### Authority


        - `ADMINISTRATOR`

        - `USER`
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationRequest'
      tags:
        - Invitation
        - Implemented
      security:
        - BearerAuth: []
  /invitations/{invitation_id}:
    parameters:
      - schema:
          type: string
        name: invitation_id
        in: path
        required: true
    get:
      summary: Get invitation
      tags:
        - Invitation
        - Implemented
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
      operationId: get-invitations-id
      description: |-
        Get invitation by ID.

        ### Authority

        - `ADMINISTRATOR`
        - `USER`
      security:
        - BearerAuth: []
    put:
      summary: Activate invitation
      operationId: put-invitations-id
      description: |-
        Activate user invitation.

        ### Authority

        - `PUBLIC`
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationActivation'
        description: Details for user activation.
      tags:
        - Invitation
  /users:
    get:
      summary: Get all users
      tags:
        - User
        - Implemented
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceUserPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
      operationId: get-users
      description: |-
        Get all users.

        ### Export users

        You can export users as a CSV list to provide `Accept: text/csv`.

        ### Authority

        - `ADMINISTRATOR`
      parameters:
        - $ref: '#/components/parameters/ExcludeFields'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Order'
        - schema:
            type: string
            enum:
              - application/json
              - text/csv
            default: application/json
          in: header
          name: Accept
          description: Indicate response format. Use `text/csv` to export users.
        - schema:
            type: string
            default: full_name
          in: query
          name: sort
          description: Indicate sort by field.
        - schema:
            type: string
            format: email
          in: query
          name: email
          description: Filter users by email.
        - schema:
            type: string
            format: uuid
          in: query
          name: uuid
          description: Filter users by uuid.
        - schema:
            type: string
          in: query
          name: external_id
          description: Filter users by  external id.
        - schema:
            type: string
          in: query
          name: full_name
          description: Filter users by full name containing (case insensitive).
        - schema:
            $ref: '#/components/schemas/instanceRole'
          in: query
          name: instance_role
          description: Filter users by role.
        - schema:
            $ref: '#/components/schemas/accountType'
          in: query
          name: account_type
          description: Filter users by account type.
      security:
        - BearerAuth: []
  /users/searches:
    post:
      summary: Create search request for users
      operationId: post-users-searches
      tags:
        - User
      description: >-
        Search users by criteria.


        You can use the following attributes as a
        `search_criteria[*].filter_key`:


        - `uuid` - filter by user UUID.

        - `external_id` - filter by user external identifier.

        - `email` - filter by user email.

        - `full_name` - filter by user full name.

        - `account_type` - filter by account type.

        - `instance_role` - filter by user role in the instance.

        - `active` - filter by user activity.

        - `created_at` - date when a user was created.

        - `updated_at` - date when a user was updated.

        - `org_id` - search by organization id.


        ### Authority


        - `ADMINISTRATOR`


        ### Access level


        #### ADMINISTRATOR


        - Filter by all attributes.

        - Use all operations.

        - Get a full user profile.
      parameters:
        - schema:
            type: string
            enum:
              - application/json
              - text/csv
            default: application/json
          in: header
          name: Accept
          description: Indicate response format. Use `text/csv` to export users.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceUserPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchCriteriaRQ'
        description: Create search request for user collection.
      security:
        - BearerAuth: []
  /users/me:
    get:
      summary: Get current user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceUser'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
      operationId: get-users-me
      description: |-
        Get current user information.

        ### Authority

        - `ADMINISTRATOR`
        - `USER`

        ### Access level

        - Current user
      tags:
        - User
        - Implemented
      parameters:
        - $ref: '#/components/parameters/ExcludeFields'
      security:
        - BearerAuth: []
  /users/{user_id}/avatar:
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      summary: Get user avatar
      operationId: get-users-user_id-avatar
      description: |-
        Get user avatar

        ### Authority

        - `ADMINISTRATOR`
        - `USER`

        ### Access level

        - Administrator get access to any user avatar
        - User get access to any user avatar
      tags:
        - User
        - Implemented
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: boolean
            default: false
          in: query
          name: thumbnail
          description: Get a thumbnail image
      responses:
        '200':
          description: Avatar retrieved successfully
          content:
            image/png:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
    post:
      summary: Upload user avatar
      operationId: post-users-user_id-avatar
      description: |-
        Upload user avatar

        ### Authority

        - `ADMINISTRATOR`
        - `USER`

        ### Access level

        - Administrator get access to any user avatar
        - User get access only to their avatar
      tags:
        - User
        - Implemented
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '201':
          description: Avatar uploaded successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - BearerAuth: []
    delete:
      summary: Delete user avatar
      operationId: delete-users-user_id-avatar
      description: |-
        Delete user avatar

        ### Authority

        - `ADMINISTRATOR`
        - `USER`

        ### Access level

        - Administrator get access to any user avatar
        - User get access only to their avatar
      tags:
        - User
        - Implemented
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Avatar deleted successfully
        '400':
          $ref: '#/components/responses/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Avatar not found
      security:
        - BearerAuth: []
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    GroupPage:
      title: Group page
      allOf:
        - $ref: '#/components/schemas/Offset'
        - properties:
            items:
              type: array
              description: List of groups.
              items:
                $ref: '#/components/schemas/GroupInfo'
      description: Page of groups.
      type: object
    CreateGroupRequest:
      title: Create group request
      allOf:
        - $ref: '#/components/schemas/GroupBase'
      description: Create group request.
    UpdateGroupRequest:
      title: Update group request
      allOf:
        - $ref: '#/components/schemas/GroupBase'
      description: Update group request.
    GroupUsersPage:
      title: Group users page
      allOf:
        - $ref: '#/components/schemas/Offset'
        - type: object
          properties:
            items:
              type: array
              description: List of group users.
              items:
                $ref: '#/components/schemas/GroupUserInfo'
      description: Page of group users.
    GroupProjectsPage:
      title: Group projects page
      allOf:
        - $ref: '#/components/schemas/Offset'
        - type: object
          properties:
            items:
              type: array
              description: List of group projects.
              items:
                $ref: '#/components/schemas/GroupProjectInfo'
      description: Page of group projects.
    GroupUserInfo:
      title: Group user
      description: Information about a user as a group member.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/identifier'
        uuid:
          type: string
          format: uuid
          description: User identifier for external systems.
        email:
          type: string
          format: email
          description: User email.
        full_name:
          $ref: '#/components/schemas/name'
        external_id:
          type: string
          description: External user identifier.
        instance_role:
          $ref: '#/components/schemas/instanceRole'
        active:
          type: boolean
          description: User activity status.
        account_type:
          $ref: '#/components/schemas/accountType'
        added_at:
          type: string
          format: date-time
          description: Timestamp of user adding to group.
    GroupProjectInfo:
      title: Group project
      x-stoplight:
        id: 18a7cdfd7ecfc
      description: Information about a project as a group member.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/identifier'
        name:
          $ref: '#/components/schemas/name'
        permission:
          $ref: '#/components/schemas/projectRole'
        added_at:
          type: string
          format: date-time
          description: Timestamp of project adding to group.
        updated_at:
          type: string
          format: date-time
          description: Timestamp of project updating in group.
    order:
      title: Order
      type: string
      enum:
        - ASC
        - DESC
      description: To indicate sorting direction. Ascending or Descending.
    Offset:
      type: object
      title: Offset-based
      description: Offset-based pagination
      properties:
        offset:
          type: integer
          description: The offset used for this page of results.
          minimum: 0
          default: 0
        limit:
          type: integer
          description: >-
            The limit used for this page of results. This will be the same as
            the limit query parameter unless it exceeded the maximum value
            allowed for this API endpoint.
          minimum: 0
          default: 300
        total_count:
          type: integer
          description: >-
            One greater than the offset of the last item in the entire
            collection. The total number of items in the collection may be less
            than total_count.
          minimum: 0
        sort:
          type: string
          description: Field to define the sort field.
        order:
          $ref: '#/components/schemas/order'
    identifier:
      title: Identifier
      type: integer
      format: int64
      minimum: 1
      description: Resource identifier.
    name:
      title: name
      type: string
      description: Display name.
      minLength: 3
      maxLength: 60
      pattern: ^[A-Za-z0-9.'_\- ]+$
    slug:
      title: slug
      type: string
      pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
      description: >-
        A slug is used to identify a resource.

        It should be unique and contain only lowercase letters, numbers, and
        hyphens.

        It should not start or end with a hyphen.
      minLength: 3
      maxLength: 60
    GroupInfo:
      title: Group information
      description: Group information.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/identifier'
          description: Group identifier.
        uuid:
          type: string
          format: uuid
          description: Global identifier of the group.
        name:
          $ref: '#/components/schemas/name'
        slug:
          $ref: '#/components/schemas/slug'
        created_by:
          type: integer
          format: int64
          description: User ID of the user who created the group.
        created_at:
          type: string
          format: date-time
          description: Timestamp when group was created.
        updated_at:
          type: string
          format: date-time
          description: Timestamp when group was last updated.
    Problem:
      title: Problem
      type: object
      description: >-
        Problem Details for HTTP APIs [RFC
        9457](https://tools.ietf.org/html/rfc9457).


        A Problem JSON object uses the media type `application/problem+json`.
      properties:
        type:
          type: string
          format: uri-reference
          description: >
            A URI reference that uniquely identifies the problem type only in
            the context of the provided API. Opposed to the specification in
            RFC-9457, it is neither recommended to be dereferenceable and point
            to a human-readable documentation nor globally unique for the
            problem type.
          default: about:blank
          example: /problems/user-authorization-failed
        title:
          type: string
          description: >
            A short summary of the problem type. Written in English and readable
            for engineers, usually not suited for non technical stakeholders and
            not localized.
          example: some title for the error situation
        status:
          type: integer
          format: int32
          description: >
            The HTTP status code generated by the origin server for this
            occurrence of the problem.
          minimum: 100
          exclusiveMaximum: true
          maximum: 600
        detail:
          type: string
          description: >
            A human readable explanation specific to this occurrence of the
            problem that is helpful to locate the problem and give advice on how
            to proceed. Written in English and readable for engineers, usually
            not suited for non technical stakeholders and not localized.
          example: some description for the error situation
        instance:
          type: string
          format: uri-reference
          description: >
            A URI reference that identifies the specific occurrence of the
            problem, e.g. by adding a fragment identifier or sub-path to the
            problem type. May be used to locate the root of this problem in the
            source code.
          example: /some/uri-reference#specific-occurrence-context
    GroupBase:
      title: Group details
      type: object
      properties:
        name:
          $ref: '#/components/schemas/name'
        slug:
          $ref: '#/components/schemas/slug'
      required:
        - name
    instanceRole:
      title: Instance role
      type: string
      enum:
        - ADMINISTRATOR
        - USER
      default: USER
      description: Instance account role.
    accountType:
      title: Account type
      type: string
      enum:
        - INTERNAL
        - UPSA
        - GITHUB
        - LDAP
        - SAML
        - SCIM
      default: INTERNAL
      description: |-
        Indicates through which service or
        authentication method the user account
        was created.

        - INTERNAL: created by the system for internal use.
        - UPSA: created for external integrations.
        - GITHUB: created for external integrations.
        - LDAP: created for external integrations.
        - SAML: created for external integrations.
        - SCIM: created for external integrations.
    projectRole:
      title: Project role
      type: string
      description: User role in the project.
      enum:
        - EDITOR
        - VIEWER
      default: VIEWER
    OrganizationInfo:
      title: Organization information
      description: Various information about an organization.
      allOf:
        - $ref: '#/components/schemas/OrganizationBase'
        - type: object
          properties:
            id:
              type: integer
              format: int64
              description: Organization ReportPortal identifier.
              minimum: 0
            type:
              $ref: '#/components/schemas/orgType'
            external_id:
              type: string
              description: |-
                External organization identifier.
                It is created for integration.
            created_at:
              type: string
              format: date-time
              description: Creation date.
            updated_at:
              type: string
              format: date-time
              description: Last update date.
        - $ref: '#/components/schemas/OrganizationStats'
    OrganizationStats:
      title: Organization statistics
      type: object
      description: General information about the organization.
      properties:
        relationships:
          type: object
          properties:
            users:
              type: object
              description: General information about the organization users.
              properties:
                meta:
                  type: object
                  properties:
                    count:
                      type: integer
                      minimum: 0
                      description: Total count of users in the organization.
            projects:
              type: object
              description: General information about the organization projects.
              properties:
                meta:
                  type: object
                  properties:
                    count:
                      type: integer
                      minimum: 0
                      description: Total count of projects in the organization.
            launches:
              type: object
              description: General information about the organization launches.
              properties:
                meta:
                  type: object
                  properties:
                    last_occurred_at:
                      type: string
                      format: date-time
                      description: Last launch occurrence date.
                    count:
                      type: integer
                      minimum: 0
                      description: |-
                        Total count of launches in the organization.
                        Access: Admin, Manager
            billing:
              type: object
              description: |-
                General information about the organization billing.
                Available only if a Billing plugin is enabled.
              properties:
                meta:
                  type: object
                  properties:
                    plan_name:
                      type: string
                      description: Plan name.
                    storage_usage:
                      type: integer
                      minimum: 0
                      description: Storage usage in percents.
                      maximum: 100
    OrganizationPage:
      title: OrganizationProfilesPage
      allOf:
        - $ref: '#/components/schemas/Offset'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/OrganizationInfo'
    OrganizationUser:
      title: Organization user account
      description: >-
        A comprehensive set of user information related to a user's
        organization.
      allOf:
        - $ref: '#/components/schemas/UserInfo'
        - type: object
          properties:
            org_role:
              $ref: '#/components/schemas/orgRole'
            assigned_at:
              type: string
              format: date-time
              description: |-
                A time when a user was assigned to
                the organization.
            stats:
              type: object
              properties:
                project_stats:
                  type: object
                  description: Statistics related to the user's projects.
                  properties:
                    total_count:
                      type: integer
                      minimum: 0
                      description: Total number of user's projects in the organization.
    OrganizationUsersPage:
      title: List of organization users
      allOf:
        - $ref: '#/components/schemas/Offset'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/OrganizationUser'
    OrganizationProjectsPage:
      title: List of organization projects
      allOf:
        - $ref: '#/components/schemas/Offset'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/ProjectInfo'
          required:
            - items
    OrgUserAssignment:
      title: User assignment request
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          description: User's internal identifier.
        org_role:
          $ref: '#/components/schemas/orgRole'
        projects:
          type: array
          items:
            $ref: '#/components/schemas/UserProjectInfo'
      required:
        - id
    OrganizationBase:
      title: Organization definition
      description: >
        Basic information provided by the client.


        A `slug` is a unique identifying part of an organization. Generated
        according to the organization name if not specified by the user.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/name'
        slug:
          $ref: '#/components/schemas/slug'
      required:
        - name
    orgType:
      title: Organization type
      type: string
      enum:
        - INTERNAL
        - PERSONAL
        - EXTERNAL
      description: >-
        - INTERNAL: created by the system for internal use.

        - PERSONAL: created for a user after the user creating. Only Enterprise
        edition feature.

        - EXTERNAL: created for external integrations.
    OffsetRequest:
      title: Offset-based
      type: object
      description: Offset-based pagination
      properties:
        offset:
          type: integer
          description: The offset used for this page of results.
          minimum: 0
          default: 0
        limit:
          type: integer
          description: >-
            The limit used for this page of results. This will be the same as
            the limit query parameter unless it exceeded the maximum value
            allowed for this API endpoint.
          minimum: 0
          default: 300
          maximum: 1000
        sort:
          type: string
          description: Field to define the sort field.
        order:
          $ref: '#/components/schemas/order'
    filterOperation:
      title: Filter operation
      type: string
      enum:
        - EQ
        - NE
        - CNT
        - NON_CNT
        - BTW
        - IN
        - GTE
        - GT
        - LTE
        - LT
      description: |
        Operation to perform for the filter:

        - EQ - Equal
        - NE - Not equal
        - CNT - Contains
        - NON_CNT - Not contains
        - BTW - Between
        - IN - In
        - GTE - Greater than or equal
        - GT - Greater than
        - LTE - Less than or equal
        - LT - Less than
    SearchCriteria:
      title: Search criteria
      type: object
      properties:
        search_criteria:
          type: array
          items:
            type: object
            properties:
              filter_key:
                type: string
                description: search by field
              operation:
                $ref: '#/components/schemas/filterOperation'
              value:
                type: string
                description: search value
    SearchCriteriaRQ:
      title: SearchCriteria
      allOf:
        - $ref: '#/components/schemas/OffsetRequest'
        - $ref: '#/components/schemas/SearchCriteria'
    UserBase:
      title: User Base
      description: |-
        User's base information.

        User has a unique email address, full name, and account type.

        Instance account role can be either `ADMIN` or `USER`.
        Only `ADMIN` users have access to change account type.
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email.
        full_name:
          $ref: '#/components/schemas/name'
        instance_role:
          $ref: '#/components/schemas/instanceRole'
        account_type:
          $ref: '#/components/schemas/accountType'
        external_id:
          type: string
          description: User external identifier. Provided by external systems.
        active:
          type: boolean
          description: Soft delete user attribute.
          default: true
      required:
        - email
        - full_name
    Link:
      title: Link
      description: JSON Hypertext Application Language (HAL) model for a link.
      type: object
      properties:
        href:
          type: string
          format: uri
          description: The URI of the resource.
        type:
          type: string
          description: >-
            The media type of the resource (e.g., 'application/json' or
            'image/png').
        title:
          type: string
          description: A human-readable description of the link.
      required:
        - href
    UserLinks:
      title: User's links
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/Link'
              description: Link to the user itself.
            avatar:
              $ref: '#/components/schemas/Link'
              description: Link to the user's profile picture.
      example:
        _links:
          self:
            href: https://api.example.com/users/123
          avatar:
            href: https://api.example.com/users/123/avatar
            type: image/png
            title: User's profile picture
    UserInfo:
      title: User general information
      description: Contains general information associated with a user account.
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int64
              description: User internal identifier.
              minimum: 0
            uuid:
              type: string
              format: uuid
              description: User ID for external systems.
            created_at:
              type: string
              format: date-time
              description: When user's account was created.
            updated_at:
              type: string
              format: date-time
              description: When user's data was modified.
            last_login_at:
              type: string
              format: date-time
              description: When user last logged in.
        - $ref: '#/components/schemas/UserBase'
        - $ref: '#/components/schemas/UserLinks'
    orgRole:
      title: Organization role
      type: string
      enum:
        - MEMBER
        - MANAGER
      default: MEMBER
      description: Organization user role.
    UserProjectInfo:
      title: User's project details
      description: Information about user's project.
      properties:
        id:
          type: integer
          format: int64
          description: Project's internal identifier.
          minimum: 0
        project_role:
          $ref: '#/components/schemas/projectRole'
      type: object
    ProjectStats:
      title: Project statistics
      description: >-
        Aggregated statistics about a project including user, launch, and
        billing information.
      type: object
      properties:
        user_stats:
          type: object
          description: Statistics about users assigned to the project.
          properties:
            total_count:
              type: integer
              minimum: 0
              description: Total number of users assigned to the project.
        launch_stats:
          type: object
          description: Statistics about launches associated with the project.
          properties:
            last_occurred_at:
              type: string
              format: date-time
              description: The date and time of the last launch occurred in the project.
            total_count:
              type: integer
              minimum: 0
              description: Total number of launches in the project.
        billing_stats:
          type: object
          description: >-
            Statistics about the project's billing information. Available only
            if the billing plugin is enabled.
          properties:
            storage_usage:
              type: integer
              minimum: 0
              maximum: 100
              description: The percentage of storage used by the project.
    ProjectBase:
      title: Project details
      type: object
      properties:
        name:
          $ref: '#/components/schemas/name'
        slug:
          $ref: '#/components/schemas/slug'
      required:
        - name
    ProjectInfo:
      title: Project information
      description: General information about a project.
      allOf:
        - type: object
          properties:
            id:
              type: integer
              description: Project internal identifier.
              format: int64
              minimum: 0
            key:
              type: string
              description: |-
                Unique identifying part of a project in
                an instance.
                Generated from an organization
                slug and project slug.
            organization_id:
              type: integer
              format: int64
              description: Organization ID to which the project belongs.
              minimum: 0
            created_at:
              type: string
              format: date-time
              description: Timestamp when project was created.
            updated_at:
              type: string
              format: date-time
              description: Timestamp when project was last updated.
            stats:
              $ref: '#/components/schemas/ProjectStats'
        - $ref: '#/components/schemas/ProjectBase'
    ProjectGroupsPage:
      title: ProjectGroupsPage
      allOf:
        - $ref: '#/components/schemas/Offset'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/ProjectGroupInfo'
    ProjectGroupInfo:
      title: Project group
      x-stoplight:
        id: b10b4883ee615
      description: Information about project group.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/identifier'
        uuid:
          type: string
          format: uuid
          description: Group identifier for external usage.
        name:
          $ref: '#/components/schemas/name'
        slug:
          $ref: '#/components/schemas/slug'
        permission:
          $ref: '#/components/schemas/projectRole'
        added_at:
          type: string
          format: date-time
          description: Timestamp of project adding to group.
        updated_at:
          type: string
          format: date-time
          description: Timestamp of project updating in group.
    Invitation:
      title: Invitation
      type: object
      description: |-
        Invitation information.

        Invitation status can be `PENDING` or `ACTIVATED`.
      properties:
        id:
          type: string
          description: Invitation identifier.
          format: uuid
        user_id:
          $ref: '#/components/schemas/userId'
        full_name:
          $ref: '#/components/schemas/name'
        email:
          type: string
          description: User's email.
          format: email
        status:
          $ref: '#/components/schemas/invitationStatus'
        link:
          type: string
          description: Link to invitation form.
          format: uri
        created_at:
          type: string
          format: date-time
          description: Creation date.
        expires_at:
          type: string
          format: date-time
          description: Expiration date.
      required:
        - id
        - email
        - status
    InvitationActivation:
      title: Invitation activation request
      type: object
      description: |-
        Minimum eight characters, at least one uppercase letter,
        one lowercase letter, one number and one special character.
      properties:
        status:
          type: string
          enum:
            - ACTIVATED
          description: Change status to ACTIVATED to create a user.
        full_name:
          $ref: '#/components/schemas/name'
        password:
          $ref: '#/components/schemas/password'
      required:
        - status
        - full_name
        - password
    InvitationRequest:
      title: Invitation creation request
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email for invitation.
        organizations:
          type: array
          description: Organizations to assign a user.
          items:
            allOf:
              - $ref: '#/components/schemas/UserOrgInfo'
              - type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserProjectInfo'
      required:
        - email
    InstanceUser:
      title: Instance User
      allOf:
        - $ref: '#/components/schemas/UserInfo'
        - type: object
          properties:
            stats:
              $ref: '#/components/schemas/InstanceUserStats'
            organizations:
              type: array
              maxItems: 100
              uniqueItems: true
              items:
                $ref: '#/components/schemas/InstanceUserOrgDetails'
    InstanceUserStats:
      title: Instance User statistics
      type: object
      properties:
        org_stats:
          type: object
          properties:
            total_count:
              type: integer
              description: Total number of user's organisations
    InstanceUserOrgDetails:
      title: Instance User organization details
      description: User's organization details.
      allOf:
        - $ref: '#/components/schemas/UserOrgInfo'
        - $ref: '#/components/schemas/OrganizationBase'
    InstanceUserPage:
      title: Instance User page
      allOf:
        - $ref: '#/components/schemas/Offset'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/InstanceUser'
      description: Page with full user information. Only for current user or administrator.
    UserOrgInfo:
      title: User's organization details
      description: Information about user's organization.
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          description: Organization internal identifier.
        org_role:
          $ref: '#/components/schemas/orgRole'
    userId:
      title: User ID
      type: integer
      format: int64
      minimum: 0
      description: User identifier.
    invitationStatus:
      title: Invitation status
      type: string
      enum:
        - PENDING
        - ACTIVATED
      description: User invitations status.
    password:
      title: password
      type: string
      pattern: ^(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^\w\d\s:])([^\s]){8,256}$
      description: |-
        Requirements:

        - password must contain 1 number (0-9).
        - password must contain 1 uppercase letters.
        - password must contain 1 lowercase letters.
        - password must contain 1 non-alpha numeric number.
        - password is 8-256 characters with no space.
  responses:
    Error:
      description: Error problem response
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    Update:
      description: Successful update response
      content:
        application/json:
          schema:
            title: Successful update
            type: object
            properties:
              message:
                type: string
                example: The update was completed successfully.
  parameters:
    Offset:
      name: offset
      in: query
      required: false
      schema:
        type: integer
        default: 0
      description: The offset used for this page of results.
    Limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        default: 300
        minimum: 0
        maximum: 1000
      description: >-
        The limit used for this page of results. This will be the same as the
        limit query parameter unless it exceeded the maximum value allowed for
        this API endpoint.
    Order:
      name: order
      in: query
      schema:
        type: string
        enum:
          - ASC
          - DESC
        default: ASC
      description: Indicate sorting direction.
    GroupId:
      name: group_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
        minimum: 0
      description: Group identifier.
    UserId:
      name: user_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
        minimum: 0
      description: User identifier.
    ProjectId:
      name: project_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
        minimum: 0
      description: Project identifier.
    organizationId:
      name: org_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
      description: Organization identifier.
    projectId:
      name: project_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
      description: Project identifier.
    ExcludeFields:
      name: exclude_fields
      in: query
      required: false
      schema:
        type: string
        description: |-
          A comma-separated list of fields to exclude from the response.
          This can be used to reduce the size of the response payload.
          For example, `exclude_fields=field1,field2`.
        example: field1,field2

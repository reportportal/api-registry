# !!!DO NOT EDIT IT DIRECTLY!!!
# This is an autogenerated file.
# Any changes made to this file will be overwritten.
# Please make changes to the source files and regenerate this file.
openapi: 3.0.3
info:
  title: ReportPortal API
  version: Organization
  description: >
    ![reportportal-logo](https://reportportal.io/docs/img/logo.svg)


    This is the API documentation for ReportPortal. We describe this
    documentation

    following our [API
    Principles](https://github.com/reportportal/reportportal-common-api/blob/main/docs/api-principles.md)

    and [RESTful API
    Guidelines](https://opensource.zalando.com/restful-api-guidelines/).


    Because this documentation is created according to the

    [API design first
    approach](https://swagger.io/resources/articles/adopting-an-api-first-approach/),

    it doesn't contain information about all existing endpoints. There are only
    pre-designed endpoints.

    If you want to see the full documentation, you can check

    the [Auto-generated API
    documentation](https://reportportal.io/docs/category/api/service-api).


    # Introduction


    ReportPortal is a service for continuous testing.

    It provides a platform for test automation and allows you to analyze

    the results of tests in various ways. The service is implemented as a web

    application and is available through a web interface or API.


    # Authentication


    ReportPortal uses the [JWT](https://jwt.io/) authentication protocol for UI
    client requests and

    the [API
    Key](https://reportportal.io/docs/reportportal-configuration/HowToGetAnAccessTokenInReportPortal/#2-authorization-with-users-api-key-for-agents)

    for agent requests.


    Both approaches use the same security scheme: `Bearer`.
  contact:
    name: ReportPortal Team
    email: support@reportportal.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: '{protocol}://{authority}/{basePath}'
    description: ReportPortal server
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
        description: Protocol
      authority:
        default: demo.reportportal.io
        description: Host name and port (if needed) of Report Portal server
      basePath:
        default: api
        description: Base path of Report Portal API
tags:
  - name: Organization
    description: Organizations collection
    x-displayName: Organization
  - name: Organization Project
    description: Organization projects collection
    x-displayName: Organization Project
  - name: Organization User
    description: Organization users collection
    x-displayName: Organization User
  - name: In progress
    description: Endpoints that are in designing
    x-displayName: In progress
  - name: Ready for implementation
    description: Endpoints that are ready for development
    x-displayName: Ready for implementation
  - name: Implemented
    description: Endpoints that are implemented
    x-displayName: Implemented
  - name: Invitation
    description: Invitation API collection
    x-displayName: Invitation
  - name: User
    description: User API collection
    x-displayName: User
  - name: Projects
    description: Operations with projects
    x-displayName: Projects
  - name: Suggestions
    description: Operations with suggestions
    x-displayName: Suggestions
paths:
  /organizations:
    get:
      summary: Get a list of organizations
      tags:
        - Organization
        - Implemented
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
      operationId: get-organizations
      description: |-
        Get a list of existing organizations.

        ### Authority

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        ### Access level

        - `ADMINISTRATOR` - no restrictions.
        - `MANAGER` - limited to viewing only their assigned organizations.
        - `MEMBER` - limited to viewing only their assigned organizations.
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Order'
        - schema:
            type: string
          in: query
          name: name
          description: Filter organizations by name by substring.
        - schema:
            type: string
            pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
          in: query
          name: slug
          description: Filter organizations by slug.
        - schema:
            type: string
            default: name
          in: query
          name: sort
          description: Indicate sort by field.
      security:
        - BearerAuth: []
    post:
      summary: Create a new organization
      operationId: post-organizations
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationInfo'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '402':
          description: Payment Required
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      description: |
        > **Enterprise edition feature** 
        >

        Create a new organization. Provide name and slug.

        ### Authority:

        - `ADMINISTRATOR`
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationBase'
        description: >-
          You can create an organization provide name and slug. If the `slug` is
          not provided, it will be generated from the `name`.
      tags:
        - Organization
        - Ready for implementation
      security:
        - BearerAuth: []
  /organizations/{org_id}:
    get:
      summary: Get organization information
      tags:
        - Organization
        - Ready for implementation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationInfo'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-organizations-org_id
      description: |-
        Provide organization information.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`
      security:
        - BearerAuth: []
    parameters:
      - $ref: '#/components/parameters/organizationId'
    put:
      summary: Update organization
      operationId: put-organizations-org_id
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: |-
        > **Enterprise edition feature** 
        >
        > Available only if an Organization plugin is enabled.

        Update organization information with the provided data.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationBase'
        description: Provide organization information for update.
      tags:
        - Organization
        - Ready for implementation
      security:
        - BearerAuth: []
    patch:
      summary: Patch organization
      operationId: patch-organizations-org_id
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: >-
        > **Enterprise edition feature** 

        >

        > Available only if an Organization plugin is enabled.


        Particular organization fields update via the [JSON Merge Patch
        standard](https://datatracker.ietf.org/doc/html/rfc7386).


        ### Authority:


        - `ADMINISTRATOR`

        - `MANAGER`
      requestBody:
        $ref: '#/components/requestBodies/JsonPatch'
      tags:
        - Organization
        - Ready for implementation
      security:
        - BearerAuth: []
    delete:
      summary: Delete organization
      operationId: delete-organizations-org_id
      responses:
        '204':
          description: No Content
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: |-
        > **Enterprise edition feature** 
        >
        > Available only if an Organization plugin is enabled.

        Delete organization by identifier.

        ### Authority:

        - `ADMINISTRATOR`
      tags:
        - Organization
        - Ready for implementation
      security:
        - BearerAuth: []
  /organizations/{org_id}/users:
    parameters:
      - $ref: '#/components/parameters/organizationId'
    get:
      summary: Get organization's users
      tags:
        - Organization User
        - Ready for implementation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUsersPage'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-organizations-org_id-users
      description: |-
        Provides a list of organization's users.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Order'
        - in: query
          name: sort
          description: Indicate sort by field.
          schema:
            type: string
            default: full_name
      security:
        - BearerAuth: []
    post:
      summary: Assignment user to organization
      operationId: post-organizations-org_id-users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: User Assignment Response
                type: object
                properties:
                  message:
                    type: string
                    default: The user was added to the organization.
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      description: >-
        This is a endpoint that provides a flow for assigning a user to the
        organization.

        It can be used as a bulk endpoint if you provide a list of projects for
        assignment.


        ### Authority:


        - `ADMINISTRATOR`

        - `MANAGER`


        ### Project authority:


        - `ADMINISTRATOR`

        - `MANAGER`


        #### For assignment user to the organization's projects:


        A users with the `ADMINISTRATOR` and `MANAGER` roles can assign users to
        the organization.


        ### Response event statuses


        You will get different statuses for project assignments according to
        which user you want

        to assign to the organization.
      requestBody:
        content:
          application/json:
            schema:
              title: User Assignment Request
              allOf:
                - $ref: '#/components/schemas/UserOrgRole'
                - type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                      minimum: 0
                      description: User's internal identifier.
                    projects:
                      type: array
                      items:
                        $ref: '#/components/schemas/UserProjectInfo'
                  required:
                    - id
        description: Definition for a user assignment.
      tags:
        - Organization User
        - Ready for implementation
      security:
        - BearerAuth: []
  /organizations/{org_id}/users/{user_id}:
    parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/UserId'
    get:
      summary: Get organization user profile
      tags:
        - Organization User
        - Ready for implementation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUser'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-organizations-org_id-users-user_id
      description: |-
        Get organization user profile.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        A user with `MEMBER` role can get only his profile.

        ### Member authority:

        - `EDITOR`
        - `VIEWER`
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchOperation'
      security:
        - BearerAuth: []
    put:
      summary: Update organization user details
      operationId: put-organizations-org_id-users-user_id
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              title: Org User Update Request
              allOf:
                - $ref: '#/components/schemas/UserOrgRole'
                - type: object
                  properties:
                    projects:
                      type: array
                      items:
                        $ref: '#/components/schemas/UserProjectInfo'
        description: Provide organization's user information for update.
      tags:
        - Organization User
        - Ready for implementation
      description: |-
        Update organization user details.

        Organization user details for update.

        ### Organization authority:

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        ### Project authority:

        - `EDITOR`
      security:
        - BearerAuth: []
    patch:
      summary: Partial organization user update
      operationId: patch-organizations-org_id-users-user_id
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: >-
        Partial organization user update.


        You can provide a project list as an additional option for assigning or
        unassigned

        a user from projects.


        ### Organization authority:


        - `ADMINISTRATOR`

        - `MANAGER`

        - `MEMBER`


        ### Project authority:


        - `EDITOR`
      tags:
        - Organization User
        - Ready for implementation
      requestBody:
        $ref: '#/components/requestBodies/JsonPatch'
      security:
        - BearerAuth: []
    delete:
      summary: Unassigned organization user
      operationId: delete-organizations-org_id-users-user_id
      responses:
        '204':
          description: No Content
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: |-
        Unassigned user from an organization and all organization projects.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
      tags:
        - Organization User
        - Ready for implementation
      security:
        - BearerAuth: []
  /organizations/{org_id}/projects:
    parameters:
      - $ref: '#/components/parameters/organizationId'
    get:
      summary: Get organization projects
      tags:
        - Organization Project
        - Ready for implementation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationProjectsPage'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-organizations-org_id-projects
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Order'
        - schema:
            type: string
          in: query
          name: name
          description: Filter projects by containing name.
        - schema:
            type: string
            pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
          in: query
          name: slug
          description: Filter projects by slug.
        - schema:
            type: string
            default: name
          in: query
          name: sort
          description: Indicate sort by field.
      description: |-
        Get a list of organization projects.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        ### Access level

        - `ADMINISTRATOR` - no restrictions.
        - `MANAGER` - no restrictions.
        - `MEMBER` - restricted to viewing only their assigned projects.
      security:
        - BearerAuth: []
    post:
      summary: Create a new project
      tags:
        - Organization Project
        - Ready for implementation
      operationId: post-organizations-org_id-projects
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectInfo'
        '400':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '409':
          $ref: '#/components/responses/Error'
      description: |-
        Create a new project in the organization. 

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectBase'
        description: >-
          You can create an project provide name and slug. If the `slug` is not
          provided, it will be generated from the `name`.
      security:
        - BearerAuth: []
  /organizations/{org_id}/projects/{project_id}:
    parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/projectId'
    get:
      summary: Get project information
      tags:
        - Organization Project
        - Ready for implementation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectInfo'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-organizations-org_id-projects-project_id
      description: |-
        Get project information.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        A user with the `MEMBER` role can get only his project.

        ### Member authority:

        - 'EDITOR'
        - 'VIEWER'
      security:
        - BearerAuth: []
    put:
      summary: Update project
      operationId: put-organizations-org_id-projects-project_id
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectInfo'
      description: |-
        Update project information.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        A user with the `MEMBER` role can update only his project.

        ### Member authority:

        - `EDITOR`
      tags:
        - Organization Project
        - Ready for implementation
      security:
        - BearerAuth: []
    patch:
      summary: Partial project update
      operationId: patch-organizations-org_id-projects-project_id
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      requestBody:
        $ref: '#/components/requestBodies/JsonPatch'
      description: ' '
      tags:
        - Organization Project
        - Ready for implementation
      security:
        - BearerAuth: []
    delete:
      summary: Delete project
      tags:
        - Organization Project
        - Ready for implementation
      operationId: delete-organizations-org_id-projects-project_id
      responses:
        '204':
          description: No Content
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: |-
        Delete project.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
      security:
        - BearerAuth: []
  /organizations/searches:
    post:
      summary: Create search request for organizations
      operationId: post-organizations-searches
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
      description: >-
        Create search request for organizations by provided criteria.


        You can use the following attributes as a
        `search_criteria[*].filter_key` for filtering:


        - `name` - filter by organization name.

        - `slug` - filter by organization slug.

        - `type` - filter by organization type.

        - `created_at` - filter by creation date.

        - `updated_at` - filter by last update date.

        - `users` - filter by the number of users.

        - `projects` - filter by the number of projects.

        - `launches` - filter by the number of launches.

        - `last_launch_occurred` - filter by the last launch occurrence.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchCriteriaRQ'
        description: Provide search criteria for organizations.
      tags:
        - Organization
        - Ready for implementation
      x-extension-authority:
        - ReportPortal: User
        - ReportPortal: Admin
      security:
        - BearerAuth: []
  /organizations/{org_id}/projects/searches:
    parameters:
      - $ref: '#/components/parameters/organizationId'
    post:
      summary: Create search request for organization projects
      operationId: post-organizations-org_id-projects-searches
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationProjectsPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
      description: >-
        Create search request for organization projects by provided criteria.


        You can use the following attributes as a
        `search_criteria[*].filter_key` for filtering:


        - `name` - filter by project name.

        - `slug` - filter by project slug.

        - `key` - filter by project key.

        - `created_at` - filter by creation date.

        - `updated_at` - filter by last update date.

        - `users` - filter by the number of users.

        - `launches` - filter by the number of launches.

        - `last_launch_occurred` - filter by the last launch occurrence.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchCriteriaRQ'
      tags:
        - Organization Project
        - Ready for implementation
      security:
        - BearerAuth: []
  /invitations:
    post:
      summary: Create user invitation
      operationId: post-invitations
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '503':
          $ref: '#/components/responses/Error'
      description: |-
        Create and send user invitation to email.

        ### Authority

        - `ADMINISTRATOR`
        - `USER`
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationRequest'
      tags:
        - Invitation
      security:
        - BearerAuth: []
    get:
      summary: Get invitations
      operationId: get-invitations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Order'
        - schema:
            type: string
            default: email
          in: query
          name: sort
          description: Indicate sort by field.
        - schema:
            type: string
            format: email
          in: query
          name: email
          description: Filter invitations by email.
      description: |-
        Get all invitations

        ### Authority

        - `ADMINISTRATOR`
      tags:
        - Invitation
      security:
        - BearerAuth: []
  /invitations/{invitation_id}:
    parameters:
      - schema:
          type: string
        name: invitation_id
        in: path
        required: true
    get:
      summary: Get invitation
      tags:
        - Invitation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
      operationId: get-invitations-id
      description: |-
        Get invitation by ID.

        ### Authority

        - `ADMINISTRATOR`
        - `USER`
      security:
        - BearerAuth: []
    put:
      summary: Activate invitation
      operationId: put-invitations-id
      description: |-
        Activate user invitation.

        ### Authority

        - `PUBLIC`
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationActivation'
        description: Details for user activation.
      tags:
        - Invitation
  /users:
    get:
      summary: Get all users
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceUserPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
      operationId: get-users
      description: |-
        Get all users.

        ### Export users

        You can export users as a CSV list to provide `Accept: text/csv`.

        ### Authority

        - `ADMINISTRATOR`
      parameters:
        - $ref: '#/components/parameters/ExcludeFields'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Order'
        - schema:
            type: string
            enum:
              - application/json
              - text/csv
            default: application/json
          in: header
          name: Accept
          description: Indicate response format. Use `text/csv` to export users.
        - schema:
            type: string
            default: full_name
          in: query
          name: sort
          description: Indicate sort by field.
        - schema:
            type: string
            format: email
          in: query
          name: email
          description: Filter users by email.
        - schema:
            type: string
            format: uuid
          in: query
          name: uuid
          description: Filter users by uuid.
        - schema:
            type: string
          in: query
          name: external_id
          description: Filter users by  external id.
        - schema:
            type: string
          in: query
          name: full_name
          description: Filter users by full name containing (case insensitive).
        - schema:
            type: string
            enum:
              - ADMINISTRATOR
              - USER
          in: query
          name: instance_role
          description: Filter users by role.
        - schema:
            type: string
            enum:
              - INTERNAL
              - UPSA
              - GITHUB
              - LDAP
              - SAML
              - SCIM
          in: query
          name: account_type
          description: Filter users by account type.
      security:
        - BearerAuth: []
    post:
      summary: Create a new user
      operationId: post-users
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceUser'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserRequest'
      description: |-
        Create a new user

        ### Authority

        - `ADMINISTRATOR`
      tags:
        - User
      security:
        - BearerAuth: []
  /users/searches:
    post:
      summary: Create search request for users
      operationId: post-users-searches
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceUserPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchCriteriaRQ'
        description: Create search request for user collection.
      tags:
        - User
      description: |-
        Search users by criteria.

        ### Authority

        - `ADMINISTRATOR`
      security:
        - BearerAuth: []
  /users/me:
    get:
      summary: Get current user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceUser'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
      operationId: get-users-me
      description: |-
        Get current user information.

        ### Authority

        - `ADMINISTRATOR`
        - `USER`

        ### Access level

        - Current user
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/ExcludeFields'
      security:
        - BearerAuth: []
  /users/{user_id}:
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      summary: Get user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceUser'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-users-user_id
      description: |-
        Get user by ID.

        ### Authority

        - `ADMINISTRATOR`
        - `USER`

        ### Access level

        - Administrator has access to any user profile
        - User has access only to his profile
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/ExcludeFields'
      security:
        - BearerAuth: []
    put:
      summary: Update user
      description: |-
        Update user base information.

        ### Authority

        - `ADMINISTRATOR`
        - `USER`

        ### Access level

        - Administrator has access to any user profile
        - User has access only to his profile
      operationId: put-users-user_id
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBase'
      tags:
        - User
      security:
        - BearerAuth: []
    patch:
      summary: Patch user
      description: |-
        Partially update user information.

        ### Authority

        - `ADMINISTRATOR`
        - `USER`

        ### Access level

        - Administrator has access to any user profile
        - User has access only to his profile
      operationId: patch-users-user_id
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      requestBody:
        $ref: '#/components/requestBodies/JsonPatch'
      tags:
        - User
      security:
        - BearerAuth: []
    delete:
      summary: Delete user
      operationId: delete-users-user_id
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: |-
        Delete user by ID.

        ### Authority

        - `ADMINISTRATOR`
        - `USER`

        ### Access level

        - Administrator has access to any user profile
        - User has access only to his profile
      tags:
        - User
      security:
        - BearerAuth: []
  /users/{user_id}/api-keys:
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      summary: Get user's API keys
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-users-user_id-api-keys
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Order'
        - schema:
            type: string
          in: query
          name: name
          description: Get a key by name
      description: |-
        Retrieve list of user's Api Keys

        ### Authority

        - `ADMINISTRATOR`
        - `USER`

        ### Access level

        - Administrator has access to any user api keys
        - User has access only to his api keys
      security:
        - BearerAuth: []
    post:
      summary: Create an API key
      operationId: post-users-user_id-api-keys
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyCreateResponse'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyCreateRequest'
      description: |-
        Create an API key for the user

        ### Access level

        - Administrator has access to any user api keys
        - User has access only to his api keys
      tags:
        - User
      security:
        - BearerAuth: []
  /users/{user_id}/api-keys/{key_id}:
    parameters:
      - $ref: '#/components/parameters/UserId'
      - schema:
          type: integer
          minLength: 0
        name: key_id
        in: path
        required: true
        description: Key identifier.
    delete:
      summary: Delete the API Key
      operationId: delete-users-user_id-api-keys-key_id
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      tags:
        - User
      description: |-
        Delete the API key by ID

        ### Authority

        - `ADMINISTRATOR`
        - `USER`

        ### Access level

        - Administrator has access to any user api keys
        - User has access only to his api keys
      security:
        - BearerAuth: []
  /users/{user_id}/password:
    parameters:
      - $ref: '#/components/parameters/UserId'
    put:
      summary: Update User password
      operationId: put-users-user_id-password
      responses:
        '501':
          $ref: '#/components/responses/Update'
      tags:
        - User
      description: Update user password.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserPassword'
      security:
        - BearerAuth: []
    post:
      summary: Recover User password
      operationId: post-users-user_id-password
      responses:
        '501':
          description: Not Implemented
      description: |-
        Recover User password

        ### Authority

        - `PUBLIC`
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestoreUserPassword'
      security: []
      tags:
        - User
  /password-recover-requests:
    post:
      summary: Create password recover request
      operationId: post-password-reset-requests
      security: []
      responses:
        '501':
          description: Not Implemented
      tags:
        - User
      description: >-
        Create password recover request. Send email with recover token and user
        ID.


        ### Authority


        - `PUBLIC`
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestorePasswordRequest'
    parameters: []
  /projects/{project_name}/activities/suggestions:
    get:
      summary: Get project suggestions
      tags:
        - Projects
        - Suggestions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      suggestions:
                        type: array
                        description: >-
                          List of activities suggestions for the project by
                          type.
                        items:
                          type: string
                  - $ref: '#/components/schemas/Limit'
        '404':
          description: Not Found
      operationId: get-project-suggestions
      parameters:
        - schema:
            type: string
            enum:
              - subject_name
          in: query
          name: type
          description: Type of suggestions
        - schema:
            type: string
          in: query
          name: filter
          description: Filter query for suggestions
        - schema:
            type: integer
          in: query
          name: limit
          description: Maximum number of suggestions
      description: >-
        Get project activities suggestions by type for autocomplete.

        Supported types:

        - subject_name: Get suggestions for activity subject names in the
        project.


        If the type isn't provided or provided incorrectly, you get a 404
        error. 
      security:
        - BearerAuth: []
    parameters:
      - schema:
          type: string
        name: project_name
        in: path
        required: true
        description: Project name
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    OrganizationInfo:
      title: Organization information
      description: Various information about an organization.
      allOf:
        - $ref: '#/components/schemas/OrganizationBase'
        - type: object
          properties:
            id:
              type: integer
              format: int64
              description: Organization ReportPortal identifier.
              minimum: 0
            type:
              type: string
              enum:
                - INTERNAL
                - PERSONAL
                - EXTERNAL
              description: >-
                Type for automatization purposes.


                There are three types:

                - INTERNAL: created by API request.

                - PERSONAL: created for a user after the user creating. Only
                Enterprise edition feature.

                - EXTERNAL: created for external integrations.
            external_id:
              type: string
              description: |-
                External organization identifier.
                It is created for integration.
            created_at:
              type: string
              format: date-time
              description: Creation date.
            updated_at:
              type: string
              format: date-time
              description: Last update date.
        - $ref: '#/components/schemas/OrganizationStats'
    OrganizationStats:
      title: Organization statistics
      type: object
      description: General information about the organization.
      properties:
        relationships:
          type: object
          properties:
            users:
              type: object
              description: General information about the organization users.
              properties:
                meta:
                  type: object
                  properties:
                    count:
                      type: integer
                      minimum: 0
                      description: Total count of users in the organization.
            projects:
              type: object
              description: General information about the organization projects.
              properties:
                meta:
                  type: object
                  properties:
                    count:
                      type: integer
                      minimum: 0
                      description: Total count of projects in the organization.
            launches:
              type: object
              description: General information about the organization launches.
              properties:
                meta:
                  type: object
                  properties:
                    last_occurred_at:
                      type: string
                      format: date-time
                      description: Last launch occurrence date.
                    count:
                      type: integer
                      minimum: 0
                      description: |-
                        Total count of launches in the organization.
                        Access: Admin, Manager
            billing:
              type: object
              description: |-
                General information about the organization billing.
                Available only if a Billing plugin is enabled.
              properties:
                meta:
                  type: object
                  properties:
                    plan_name:
                      type: string
                      description: Plan name.
                    storage_usage:
                      type: integer
                      minimum: 0
                      description: Storage usage in percents.
                      maximum: 100
    OrganizationPage:
      title: OrganizationProfilesPage
      allOf:
        - $ref: '#/components/schemas/Offset'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/OrganizationInfo'
    OrganizationUser:
      title: Organization user account
      description: >-
        A comprehensive set of user information related to a user's
        organization.
      allOf:
        - $ref: '#/components/schemas/UserInfo'
        - $ref: '#/components/schemas/UserOrgRole'
        - type: object
          properties:
            assigned_at:
              type: string
              format: date-time
              description: |-
                A time when a user was assigned to
                the organization.
            stats:
              type: object
              properties:
                project_stats:
                  type: object
                  description: Statistics related to the user's projects.
                  properties:
                    total_count:
                      type: integer
                      minimum: 0
                      description: Total number of user's projects in the organization.
    OrganizationUsersPage:
      title: List of organization users
      allOf:
        - $ref: '#/components/schemas/Offset'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/OrganizationUser'
    OrganizationProjectsPage:
      title: List of organization projects
      allOf:
        - $ref: '#/components/schemas/Offset'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/ProjectInfo'
          required:
            - items
    Offset:
      type: object
      title: Offset-based
      description: Offset-based pagination
      properties:
        offset:
          type: integer
          description: The offset used for this page of results.
          minimum: 0
          default: 0
        limit:
          type: integer
          description: >-
            The limit used for this page of results. This will be the same as
            the limit query parameter unless it exceeded the maximum value
            allowed for this API endpoint.
          minimum: 0
          default: 300
        total_count:
          type: integer
          description: >-
            One greater than the offset of the last item in the entire
            collection. The total number of items in the collection may be less
            than total_count.
          minimum: 0
        sort:
          type: string
          description: Field to define the sort field.
        order:
          type: string
          description: To indicate sorting direction. Ascending or Descending.
          enum:
            - ASC
            - DESC
    name:
      title: name
      type: string
      description: Display name.
      minLength: 3
      maxLength: 60
      pattern: ^[A-Za-z0-9._\- ]+$
    slug:
      title: slug
      type: string
      pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
      description: >-
        A slug is used to identify a resource.

        It should be unique and contain only lowercase letters, numbers, and
        hyphens.

        It should not start or end with a hyphen.
      minLength: 3
      maxLength: 60
    OrganizationBase:
      title: Organization definition
      description: >
        Basic information provided by the client.


        A `slug` is a unique identifying part of an organization. Generated
        according to the organization name if not specified by the user.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/name'
        slug:
          $ref: '#/components/schemas/slug'
      required:
        - name
    Problem:
      title: Problem
      type: object
      description: >-
        Problem Details for HTTP APIs [RFC
        9457](https://tools.ietf.org/html/rfc9457).


        A Problem JSON object uses the media type `application/problem+json`.
      properties:
        type:
          type: string
          format: uri-reference
          description: >
            A URI reference that uniquely identifies the problem type only in
            the context of the provided API. Opposed to the specification in
            RFC-9457, it is neither recommended to be dereferenceable and point
            to a human-readable documentation nor globally unique for the
            problem type.
          default: about:blank
          example: /problems/user-authorization-failed
        title:
          type: string
          description: >
            A short summary of the problem type. Written in English and readable
            for engineers, usually not suited for non technical stakeholders and
            not localized.
          example: some title for the error situation
        status:
          type: integer
          format: int32
          description: >
            The HTTP status code generated by the origin server for this
            occurrence of the problem.
          minimum: 100
          exclusiveMaximum: true
          maximum: 600
        detail:
          type: string
          description: >
            A human readable explanation specific to this occurrence of the
            problem that is helpful to locate the problem and give advice on how
            to proceed. Written in English and readable for engineers, usually
            not suited for non technical stakeholders and not localized.
          example: some description for the error situation
        instance:
          type: string
          format: uri-reference
          description: >
            A URI reference that identifies the specific occurrence of the
            problem, e.g. by adding a fragment identifier or sub-path to the
            problem type. May be used to locate the root of this problem in the
            source code.
          example: /some/uri-reference#specific-occurrence-context
    PatchObject:
      title: Patch Operation Object
      type: object
      properties:
        op:
          type: string
          enum:
            - add
            - replace
            - remove
        path:
          type: string
        value:
          type: object
    PatchArrayString:
      title: Patch Operation Array String
      type: object
      properties:
        op:
          type: string
          enum:
            - add
            - replace
            - remove
        path:
          type: string
        value:
          type: array
          items:
            type: string
    PatchString:
      title: Patch Operation String
      type: object
      properties:
        op:
          type: string
          enum:
            - add
            - replace
            - remove
        path:
          type: string
        value:
          type: string
    PatchNumber:
      title: Patch Operation Number
      type: object
      properties:
        op:
          type: string
          enum:
            - add
            - replace
            - remove
        path:
          type: string
        value:
          type: number
    PatchInteger:
      title: Patch Operation Integer
      type: object
      properties:
        op:
          type: string
          enum:
            - add
            - replace
            - remove
        path:
          type: string
        value:
          type: integer
    PatchBoolean:
      title: Patch Operation Boolean
      type: object
      properties:
        op:
          type: string
          enum:
            - add
            - replace
            - remove
        path:
          type: string
        value:
          type: boolean
    PatchOperation:
      title: Patch Operation Object
      oneOf:
        - $ref: '#/components/schemas/PatchObject'
        - $ref: '#/components/schemas/PatchArrayString'
        - $ref: '#/components/schemas/PatchString'
        - $ref: '#/components/schemas/PatchNumber'
        - $ref: '#/components/schemas/PatchInteger'
        - $ref: '#/components/schemas/PatchBoolean'
    PatchOperationList:
      title: Patch Operation List
      type: array
      items:
        $ref: '#/components/schemas/PatchOperation'
    UserBase:
      title: User Base
      description: |-
        User's base information.

        User has a unique email address, full name, and account type.

        Instance account role can be either `ADMIN` or `USER`.
        Only `ADMIN` users have access to change account type.
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email.
        full_name:
          $ref: '#/components/schemas/name'
        instance_role:
          type: string
          enum:
            - ADMINISTRATOR
            - USER
          description: Instance account role.
          default: USER
        account_type:
          type: string
          description: |-
            Indicates through which service or
            authentication method the user account
            was created.
          enum:
            - INTERNAL
            - UPSA
            - GITHUB
            - LDAP
            - SAML
            - SCIM
          default: INTERNAL
        external_id:
          type: string
          description: User external identifier. Provided by external systems.
        active:
          type: boolean
          description: Soft delete user attribute.
          default: true
      required:
        - email
        - full_name
    Link:
      title: Link
      description: JSON Hypertext Application Language (HAL) model for a link.
      type: object
      properties:
        href:
          type: string
          format: uri
          description: The URI of the resource.
        type:
          type: string
          description: >-
            The media type of the resource (e.g., 'application/json' or
            'image/png').
        title:
          type: string
          description: A human-readable description of the link.
      required:
        - href
    UserLinks:
      title: User's links
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/Link'
              description: Link to the user itself.
            profile_picture:
              $ref: '#/components/schemas/Link'
              description: Link to the user's profile picture.
            profile_picture_thumbnail:
              $ref: '#/components/schemas/Link'
              description: Link to the user's profile picture thumbnail.
      example:
        _links:
          self:
            href: /users/1
          profile_picture:
            href: /files/214213423
            type: image/png
            title: User's profile picture
          profile_picture_thumbnail:
            href: /files/214213423-mini
            type: image/png
            title: User's profile picture thumbnail
    UserInfo:
      title: User general information
      description: Contains general information associated with a user account.
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int64
              description: User internal identifier.
              minimum: 0
            uuid:
              type: string
              format: uuid
              description: User ID for external systems.
            created_at:
              type: string
              format: date-time
              description: When user's account was created.
            updated_at:
              type: string
              format: date-time
              description: When user's data was modified.
            last_login_at:
              type: string
              format: date-time
              description: When user last logged in.
        - $ref: '#/components/schemas/UserBase'
        - $ref: '#/components/schemas/UserLinks'
    UserOrgRole:
      title: Organization user details
      type: object
      description: Basic information about a user in the organization.
      properties:
        org_role:
          type: string
          enum:
            - MEMBER
            - MANAGER
          description: Organization user role.
          default: MEMBER
    UserProjectRole:
      title: User's project role
      description: Information about user's project role.
      type: object
      properties:
        project_role:
          type: string
          description: User role in the project.
          enum:
            - EDITOR
            - VIEWER
          default: VIEWER
    UserProjectInfo:
      title: User's project details
      description: Information about user's project.
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int64
              description: Project's internal identifier.
              minimum: 0
        - $ref: '#/components/schemas/UserProjectRole'
    ProjectStats:
      title: Project statistics
      description: >-
        Aggregated statistics about a project including user, launch, and
        billing information.
      type: object
      properties:
        user_stats:
          type: object
          description: Statistics about users assigned to the project.
          properties:
            total_count:
              type: integer
              minimum: 0
              description: Total number of users assigned to the project.
        launch_stats:
          type: object
          description: Statistics about launches associated with the project.
          properties:
            last_occurred_at:
              type: string
              format: date-time
              description: The date and time of the last launch occurred in the project.
            total_count:
              type: integer
              minimum: 0
              description: Total number of launches in the project.
        billing_stats:
          type: object
          description: >-
            Statistics about the project's billing information. Available only
            if the billing plugin is enabled.
          properties:
            storage_usage:
              type: integer
              minimum: 0
              maximum: 100
              description: The percentage of storage used by the project.
    ProjectBase:
      title: Project details
      type: object
      properties:
        name:
          $ref: '#/components/schemas/name'
        slug:
          $ref: '#/components/schemas/slug'
      required:
        - name
    ProjectInfo:
      title: Project information
      description: General information about a project.
      allOf:
        - type: object
          properties:
            id:
              type: integer
              description: Project internal identifier.
              format: int64
              minimum: 0
            key:
              type: string
              description: |-
                Unique identifying part of a project in
                an instance.
                Generated from an organization
                slug and project slug.
            organization_id:
              type: integer
              format: int64
              description: Organization ID to which the project belongs.
              minimum: 0
            created_at:
              type: string
              format: date-time
              description: Timestamp when project was created.
            updated_at:
              type: string
              format: date-time
              description: Timestamp when project was last updated.
            stats:
              $ref: '#/components/schemas/ProjectStats'
        - $ref: '#/components/schemas/ProjectBase'
    OffsetRequest:
      type: object
      title: Offset-based
      description: Offset-based pagination
      properties:
        offset:
          type: integer
          description: The offset used for this page of results.
          minimum: 0
          default: 0
        limit:
          type: integer
          description: >-
            The limit used for this page of results. This will be the same as
            the limit query parameter unless it exceeded the maximum value
            allowed for this API endpoint.
          minimum: 0
          default: 300
          maximum: 1000
        sort:
          type: string
          description: Field to define the sort field.
        order:
          type: string
          description: To indicate sorting direction. Ascending or Descending.
          enum:
            - ASC
            - DESC
          default: ASC
    SearchCriteria:
      title: Search criteria
      type: object
      properties:
        search_criteria:
          type: array
          items:
            type: object
            properties:
              filter_key:
                type: string
                description: search by field
              operation:
                type: string
                enum:
                  - EQ
                  - NE
                  - CNT
                  - NON_CNT
                  - BTW
                  - IN
                description: operation to perform for the filter
              value:
                type: string
                description: search value
    SearchCriteriaRQ:
      title: SearchCriteria
      allOf:
        - $ref: '#/components/schemas/OffsetRequest'
        - $ref: '#/components/schemas/SearchCriteria'
    Invitation:
      title: Invitation
      type: object
      description: |-
        Invitation information.

        Invitation status can be `PENDING` or `ACTIVATED`.
      properties:
        id:
          type: string
          description: Invitation identifier.
          format: uuid
        user_id:
          $ref: '#/components/schemas/userId'
        full_name:
          $ref: '#/components/schemas/name'
        email:
          type: string
          description: User's email.
          format: email
        status:
          type: string
          enum:
            - PENDING
            - ACTIVATED
          description: User invitations status.
        link:
          type: string
          description: Link to invitation form.
          format: uri
        created_at:
          type: string
          format: date-time
          description: Creation date.
        expires_at:
          type: string
          format: date-time
          description: Expiration date.
      required:
        - id
        - email
        - status
    InvitationPage:
      title: Invitation page
      allOf:
        - $ref: '#/components/schemas/Offset'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Invitation'
    InvitationRequest:
      title: Invitation creation request
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email for invitation.
        organizations:
          type: array
          description: Organizations to assign a user.
          items:
            allOf:
              - $ref: '#/components/schemas/UserOrgInfo'
              - type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserProjectInfo'
      required:
        - email
    InvitationActivation:
      title: Invitation activation request
      type: object
      description: |-
        Minimum eight characters, at least one uppercase letter,
        one lowercase letter, one number and one special character.
      properties:
        status:
          type: string
          enum:
            - ACTIVATED
          description: Change status to ACTIVATED to create a user.
        full_name:
          $ref: '#/components/schemas/name'
        password:
          $ref: '#/components/schemas/password'
      required:
        - status
        - full_name
        - password
    ApiKey:
      title: API Key
      type: object
      description: Common info of the API Key.
      properties:
        id:
          type: integer
          description: Internal identifier
        name:
          type: string
          description: API Key unique name
        user_id:
          type: integer
          description: API Key owner
        created_at:
          type: string
          format: date-time
          description: Date time with milliseconds
          example: '2019-07-30T06:43:40.252Z'
        last_used_at:
          type: string
          format: date-time
          example: '2019-07-30T06:43:40.252Z'
          description: Date time with milliseconds
    ApiKeyCreateRequest:
      title: API Key creation request
      type: object
      properties:
        name:
          type: string
          description: Unique name for the new API key
      required:
        - name
    ApiKeyCreateResponse:
      allOf:
        - $ref: '#/components/schemas/ApiKey'
        - type: object
          properties:
            api_key:
              type: string
              description: The generated API key
          required:
            - api_key
      title: API Key creation response
    ApiKeyPage:
      title: API Key page
      allOf:
        - $ref: '#/components/schemas/Offset'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/ApiKey'
    NewUserRequest:
      title: User creation request
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          properties:
            password:
              $ref: '#/components/schemas/password'
      description: New user creation
    InstanceUser:
      title: Instance User
      allOf:
        - $ref: '#/components/schemas/UserInfo'
        - type: object
          properties:
            stats:
              $ref: '#/components/schemas/InstanceUserStats'
            organizations:
              type: array
              items:
                $ref: '#/components/schemas/InstanceUserOrgDetails'
    InstanceUserStats:
      title: Instance User statistics
      type: object
      properties:
        org_stats:
          type: object
          properties:
            total_count:
              type: integer
              description: Total number of user's organisations
    InstanceUserOrgDetails:
      title: Instance User organization details
      description: User's organization details.
      allOf:
        - $ref: '#/components/schemas/UserOrgInfo'
        - $ref: '#/components/schemas/OrganizationBase'
    InstanceUserPage:
      title: Instance User page
      allOf:
        - $ref: '#/components/schemas/Offset'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/InstanceUser'
    NewUserPassword:
      title: New User password
      type: object
      properties:
        old_password:
          type: string
          format: password
          description: Old user password.
        new_password:
          $ref: '#/components/schemas/password'
      required:
        - old_password
        - new_password
      description: Change user password.
    RestoreUserPassword:
      title: Restore User password
      type: object
      properties:
        token:
          type: string
          format: uuid
          description: Token for password recovery. It's provided in email.
        new_password:
          $ref: '#/components/schemas/password'
      required:
        - token
        - new_password
    RestorePasswordRequest:
      title: Restore password request
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email for password recovery.
      required:
        - email
    userId:
      title: User ID
      x-stoplight:
        id: 5a0f430220b3a
      type: integer
      format: int64
      minimum: 0
      description: User identifier.
    UserOrgInfo:
      title: User's organization details
      description: Information about user's organization.
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int64
              minimum: 0
              description: Organization internal identifier.
        - $ref: '#/components/schemas/UserOrgRole'
    password:
      title: password
      type: string
      pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).+$
      minLength: 8
      maxLength: 256
      description: |-
        Minimum eight characters, at least one uppercase letter,
        one lowercase letter, one number and one special character.
    Limit:
      title: Limit
      type: object
      properties:
        limit:
          type: integer
          description: >-
            The limit used for this page of results. This will be the same as
            the limit query parameter unless it exceeded the maximum value
            allowed for this API endpoint.
          minimum: 0
        count:
          type: integer
          description: The number of results returned in this page of results.
          minimum: 0
      description: ''
  parameters:
    organizationId:
      name: org_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
      description: Organization identifier.
    projectId:
      name: project_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
      description: Project identifier.
    Offset:
      name: offset
      in: query
      required: false
      schema:
        type: integer
        default: 0
      description: The offset used for this page of results.
    Limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        default: 300
        minimum: 0
        maximum: 1000
      description: >-
        The limit used for this page of results. This will be the same as the
        limit query parameter unless it exceeded the maximum value allowed for
        this API endpoint.
    Order:
      name: order
      in: query
      schema:
        type: string
        enum:
          - ASC
          - DESC
        default: ASC
      description: Indicate sorting direction.
    UserId:
      name: user_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
        minimum: 0
      description: User identifier.
    ExcludeFields:
      name: exclude_fields
      in: query
      required: false
      schema:
        type: string
        description: |-
          A comma-separated list of fields to exclude from the response.
          This can be used to reduce the size of the response payload.
          For example, `exclude_fields=field1,field2`.
        example: field1,field2
  responses:
    Update:
      description: Successful update response
      content:
        application/json:
          schema:
            title: Successful update
            type: object
            properties:
              message:
                type: string
                example: The update was completed successfully.
    Error:
      description: Error problem response
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
  requestBodies:
    JsonPatch:
      content:
        application/json-patch+json:
          schema:
            $ref: '#/components/schemas/PatchOperationList'
      description: JSON Patch operations

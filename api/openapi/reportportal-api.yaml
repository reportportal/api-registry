# !!!DO NOT EDIT IT DIRECTLY!!!
# This is an autogenerated file.
# Any changes made to this file will be overwritten.
# Please make changes to the source files and regenerate this file.
openapi: 3.0.3
info:
  title: ReportPortal API
  version: 5-Organization
  description: >
    ![reportportal-logo](https://reportportal.io/docs/img/logo.svg)


    This is the API documentation for ReportPortal. We describe this
    documentation

    following our [API
    Principles](https://github.com/reportportal/reportportal-common-api/blob/main/docs/api-principles.md)

    and [RESTful API
    Guidelines](https://opensource.zalando.com/restful-api-guidelines/).


    Because this documentation is created according to the

    [API design first
    approach](https://swagger.io/resources/articles/adopting-an-api-first-approach/),

    it doesn't contain information about all existing endpoints. There are only
    pre-designed endpoints.

    If you want to see the full documentation, you can check

    the [Auto-generated API
    documentation](https://reportportal.io/docs/category/api/service-api).


    # Introduction


    ReportPortal is a service for continuous testing.

    It provides a platform for test automation and allows you to analyze

    the results of tests in various ways. The service is implemented as a web

    application and is available through a web interface or API.


    # Authentication


    ReportPortal uses the [JWT](https://jwt.io/) authentication protocol for UI
    client requests and

    the [API
    Key](https://reportportal.io/docs/reportportal-configuration/HowToGetAnAccessTokenInReportPortal/#2-authorization-with-users-api-key-for-agents)

    for agent requests.


    Both approaches use the same security scheme: `Bearer`.
  contact:
    name: ReportPortal Team
    email: support@reportportal.io
servers:
  - url: '{protocol}://{authority}/{basePath}'
    description: ReportPortal server
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
        description: Protocol
      authority:
        default: demo.reportportal.io
        description: Host name and port (if needed) of Report Portal server
      basePath:
        default: api
        description: Base path of Report Portal API
tags:
  - name: Organization
    description: Organizations collection
    x-displayName: Organization
  - name: Organization Project
    description: Organization projects collection
    x-displayName: Organization Project
  - name: Organization User
    description: Organization users collection
    x-displayName: Organization User
  - name: In progress
    description: Endpoints that are in designing
    x-displayName: In progress
  - name: Ready for implementation
    description: Endpoints that are ready for development
    x-displayName: Ready for implementation
  - name: Implemented
    description: Endpoints that are implemented
    x-displayName: Implemented
  - name: Invitation
    description: User invitations
    x-displayName: Invitation
paths:
  /organizations:
    get:
      summary: Get a list of organizations
      tags:
        - Organization
        - Implemented
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationProfilesPage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      operationId: get-organizations
      description: |-
        Get a list of existing organizations.

        ### Authority

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        ### Access level

        - `ADMINISTRATOR` - no restrictions.
        - `MANAGER` - limited to viewing only their assigned organizations.
        - `MEMBER` - limited to viewing only their assigned organizations.
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Order'
        - schema:
            type: string
          in: query
          name: name
          description: Filter organizations by name by substring
        - schema:
            type: string
            pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
          in: query
          name: slug
          description: Filter organizations by slug
        - schema:
            type: string
            default: name
          in: query
          name: sort
          description: Indicate sort by field
      security:
        - BearerAuth: []
    post:
      summary: Create a new organization
      operationId: post-organizations
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationInfo'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '402':
          description: Payment Required
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      description: |
        > **Enterprise edition feature** 
        >
        > Available only if an Organization plugin is enabled.

        Create a new organization. Provide name and slug.

        ### Authority: 

        - `ADMINISTRATOR`
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationDetails'
        description: >-
          You can create an organization provide name and slug. If the `slug` is
          not provided, it will be generated from the `name`.
      tags:
        - Organization
        - Ready for implementation
      security:
        - BearerAuth: []
  /organizations/{org_id}:
    get:
      summary: Get organization information
      tags:
        - Organization
        - Ready for implementation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationProfile'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      operationId: get-organizations-org_id
      description: |-
        Provide organization information.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`
      security:
        - BearerAuth: []
    parameters:
      - $ref: '#/components/parameters/OrganizationId'
    put:
      summary: Update organization
      operationId: put-organizations-org_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: The organization update was completed successfully.
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '402':
          description: Payment Required
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      description: |-
        > **Enterprise edition feature** 
        >
        > Available only if an Organization plugin is enabled.

        Update organization information with the provided data.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationDetails'
        description: Provide organization information for update.
      tags:
        - Organization
        - Ready for implementation
      x-internal: false
      security:
        - BearerAuth: []
    patch:
      summary: Partial organization update
      operationId: patch-organizations-org_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: The organization update was completed successfully.
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '402':
          description: Payment Required
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      description: >-
        > **Enterprise edition feature** 

        >

        > Available only if an Organization plugin is enabled.


        Particular organization fields update via the [JSON Merge Patch
        standard](https://datatracker.ietf.org/doc/html/rfc7386).


        ### Authority:


        - `ADMINISTRATOR`

        - `MANAGER`
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/OrganizationDetails'
        description: >-
          Use PATCH with JSON Merge Patch standard, a specialized media type
          application/merge-patch+json for partial resource representation to
          update parts of resource objects.
      tags:
        - Organization
        - Ready for implementation
      x-internal: false
      security:
        - BearerAuth: []
    delete:
      summary: Delete organization
      operationId: delete-organizations-org_id
      responses:
        '204':
          description: No Content
        '402':
          description: Payment Required
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      description: |-
        > **Enterprise edition feature** 
        >
        > Available only if an Organization plugin is enabled.

        Delete organization by identifier.

        ### Authority:

        - `ADMINISTRATOR`
      tags:
        - Organization
        - Ready for implementation
      x-internal: false
      security:
        - BearerAuth: []
  /organizations/{org_id}/users:
    parameters:
      - $ref: '#/components/parameters/OrganizationId'
    get:
      summary: Get organization's users
      tags:
        - Organization User
        - Ready for implementation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUsersPage'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      operationId: get-organizations-org_id-users
      description: |-
        Provides a list of organization's users.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Order'
        - in: query
          name: sort
          description: Indicate sort by field
          schema:
            type: string
            default: name
      security:
        - BearerAuth: []
    post:
      summary: Assignment user to organization
      operationId: post-organizations-org_id-users
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The user was added to the organization.
              examples:
                Assign or create:
                  value:
                    message: The user was added to the organization.
        '207':
          description: Multi-Status (WebDAV)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Multistatus'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      description: >-
        This is a complex endpoint that provides a flow for assigning a user to
        the organization.

        It can be used as a bulk endpoint if you provide a list of projects for
        assignment.


        ### Authority:


        - `ADMINISTRATOR`

        - `MANAGER`


        ### Project authority:


        - `ADMINISTRATOR`

        - `MANAGER`


        #### For assignment user to the organization's projects:


        A users with the `ADMINISTRATOR` and `MANAGER` roles can assign users to
        the organization.


        ### Response event statuses


        You will get different statuses for project assignments according to
        which user you want

        to assign to the organization.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/OrganizationUserDefinition'
                - $ref: '#/components/schemas/OrganizationUserAttributes'
                - $ref: '#/components/schemas/UserProjectsList'
        description: Definition for a user assignment.
      tags:
        - Organization User
        - Ready for implementation
      security:
        - BearerAuth: []
  /organizations/{org_id}/users/{user_id}:
    parameters:
      - $ref: '#/components/parameters/OrganizationId'
      - $ref: '#/components/parameters/UserId'
    get:
      summary: Get organization user profile
      tags:
        - Organization User
        - Ready for implementation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUserInfo'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      operationId: get-organizations-org_id-users-user_id
      description: |-
        Get organization user profile.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        A user with `MEMBER` role can get only his profile.

        ### Member authority:

        - `EDITOR`
        - `VIEWER`
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchOperation'
      security:
        - BearerAuth: []
    put:
      summary: Update organization user details
      operationId: put-organizations-org_id-users-user_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUserInfo'
        '207':
          description: |-
            Multi-Status (WebDAV)

            Response for a user assignment with projects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Multistatus'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/OrganizationUserAttributes'
                - $ref: '#/components/schemas/UserProjectsList'
        description: Provide organization's user information for update.
      tags:
        - Organization User
        - Ready for implementation
      description: |-
        Update organization user details.

        Organization user details for update.

        ### Organization authority:

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        ### Project authority:

        - `EDITOR`
      security:
        - BearerAuth: []
    patch:
      summary: Partial organization user update
      operationId: patch-organizations-org_id-users-user_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUserInfo'
        '207':
          description: |-
            Multi-Status (WebDAV)

            Response for a user assignment with projects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Multistatus'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      description: >-
        Partial organization user update.


        You can provide a project list as an additional option for assigning or
        unassigned

        a user from projects.


        ### Organization authority:


        - `ADMINISTRATOR`

        - `MANAGER`

        - `MEMBER`


        ### Project authority:


        - `EDITOR`
      tags:
        - Organization User
        - Ready for implementation
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PatchOperation'
        description: ''
      security:
        - BearerAuth: []
    delete:
      summary: Unassigned organization user
      operationId: delete-organizations-org_id-users-user_id
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      description: |-
        Unassigned user from an organization and all organization projects.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
      tags:
        - Organization User
        - Ready for implementation
      security:
        - BearerAuth: []
  /organizations/{org_id}/projects:
    parameters:
      - $ref: '#/components/parameters/OrganizationId'
    get:
      summary: Get organization projects
      tags:
        - Organization Project
        - Ready for implementation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationProjectsPage'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      operationId: get-organizations-org_id-projects
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Order'
        - schema:
            type: string
          in: query
          name: name
          description: Filter projects by containing name
        - schema:
            type: string
            pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
          in: query
          name: slug
          description: Filter projects by slug
        - schema:
            type: string
            default: name
          in: query
          name: sort
          description: Indicate sort by field
      description: |-
        Get a list of organization projects.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        ### Access level

        - `ADMINISTRATOR` - no restrictions.
        - `MANAGER` - no restrictions.
        - `MEMBER` - restricted to viewing only their assigned projects.
      security:
        - BearerAuth: []
    post:
      summary: Create a new project
      tags:
        - Organization Project
        - Ready for implementation
      operationId: post-organizations-org_id-projects
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationProjectInfo'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      description: |-
        Create a new project in the organization. 

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectDetails'
        description: >-
          You can create an project provide name and slug. If the `slug` is not
          provided, it will be generated from the `name`.
      security:
        - BearerAuth: []
  /organizations/{org_id}/projects/{project_id}:
    parameters:
      - $ref: '#/components/parameters/OrganizationId'
      - $ref: '#/components/parameters/ProjectId'
    get:
      summary: Get project information
      tags:
        - Organization Project
        - Ready for implementation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectProfile'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      operationId: get-organizations-org_id-projects-project_id
      description: |-
        Get project information.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        A user with the `MEMBER` role can get only his project.

        ### Member authority:

        - 'EDITOR'
        - 'VIEWER'
      security:
        - BearerAuth: []
    put:
      summary: Update project
      operationId: put-organizations-org_id-projects-project_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationProjectInfo'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectDetails'
      description: |-
        Update project information.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        A user with the `MEMBER` role can update only his project.

        ### Member authority:

        - `EDITOR`
      tags:
        - Organization Project
        - Ready for implementation
      security:
        - BearerAuth: []
    patch:
      summary: Partial project update
      operationId: patch-organizations-org_id-projects-project_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationProjectInfo'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PatchOperation'
        description: ''
      description: |-
        Partial project update.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
        - `MEMBER`

        A user with the `MEMBER` role can update only his project.

        ### Member authority:

        - `EDITOR`
      tags:
        - Organization Project
        - Ready for implementation
      security:
        - BearerAuth: []
    delete:
      summary: Delete project
      tags:
        - Organization Project
        - Ready for implementation
      operationId: delete-organizations-org_id-projects-project_id
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      description: |-
        Delete project.

        ### Authority:

        - `ADMINISTRATOR`
        - `MANAGER`
      security:
        - BearerAuth: []
  /organizations/{org_id}/settings:
    parameters:
      - $ref: '#/components/parameters/OrganizationId'
    get:
      summary: '#TODO'
      tags:
        - In progress
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  retention_policy:
                    $ref: '#/components/schemas/OrganizationRetentionPolicy'
                  notification_policy:
                    $ref: '#/components/schemas/OrganizationNotificationPolicy'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: 'Not Found: Organization not found.'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      operationId: get-organizations-org_id-settings
      description: '#TODO'
      security:
        - BearerAuth: []
  /organizations/{org_id}/settings/{setting_name}:
    parameters:
      - $ref: '#/components/parameters/OrganizationId'
      - schema:
          type: string
          enum:
            - retention-policy
            - notification-policy
        name: setting_name
        in: path
        required: true
        description: Specific setting name
    get:
      summary: '#TODO'
      tags:
        - In progress
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/OrganizationRetentionPolicy'
                  - $ref: '#/components/schemas/OrganizationNotificationPolicy'
                description: '#TODO'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: 'Not Found: Organization or setting not found.'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      operationId: get-organizations-org_id-settings-setting_name
      description: '#TODO'
      security:
        - BearerAuth: []
    put:
      summary: '#TODO'
      operationId: put-organizations-org_id-settings-setting_name
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                Retention policy:
                  value:
                    id: retention-policy
                    status: SUCCESS
                    description: Retention policy updated successfully.
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      description: '#TODO'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/OrganizationRetentionPolicy'
                - $ref: '#/components/schemas/OrganizationNotificationPolicy'
          application/xml:
            schema:
              oneOf:
                - $ref: '#/components/schemas/OrganizationRetentionPolicy'
                - $ref: '#/components/schemas/OrganizationNotificationPolicy'
      tags:
        - In progress
      security:
        - BearerAuth: []
    patch:
      summary: '#TODO'
      operationId: patch-organizations-org_id-settings-setting_name
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '404':
          description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/OrganizationRetentionPolicy'
                - $ref: '#/components/schemas/OrganizationNotificationPolicy'
      description: '#TODO'
      tags:
        - In progress
      security:
        - BearerAuth: []
  /organizations/{org_id}/notification-rules:
    parameters:
      - schema:
          type: string
        name: org_id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags:
        - In progress
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationNotifyRulesList'
      operationId: get-organizations-org_id-notification-rules
      description: '#TODO'
      security:
        - BearerAuth: []
    post:
      summary: '#TODO'
      operationId: post-organizations-org_id-notification-rules
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationNotifyRule'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationNotifyRuleDefinition'
      description: '#TODO'
      tags:
        - In progress
      security:
        - BearerAuth: []
  /organizations/{org_id}/notification-rules/{notify_rule_id}:
    parameters:
      - schema:
          type: string
        name: org_id
        in: path
        required: true
      - schema:
          type: string
        name: notify_rule_id
        in: path
        required: true
    get:
      summary: '#TODO'
      tags:
        - In progress
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationNotifyRule'
      operationId: get-organizations-org_id-notifications-rules-rule_id
      description: '#TODO'
      security:
        - BearerAuth: []
    put:
      summary: '#TODO'
      operationId: put-organizations-org_id-notification-rules-notify_rule_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationNotifyRuleDefinition'
      description: '#TODO'
      tags:
        - In progress
      security:
        - BearerAuth: []
    patch:
      summary: '#TODO'
      operationId: patch-organizations-org_id-notification-rules-notify_rule_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
      description: '#TODO'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationNotifyRuleDefinition'
      tags:
        - In progress
      security:
        - BearerAuth: []
    delete:
      summary: '#TODO'
      operationId: delete-organizations-org_id-notification-rules-notify_rule_id
      responses:
        '204':
          description: No Content
      description: '#TODO'
      tags:
        - In progress
      security:
        - BearerAuth: []
  /organizations/searches:
    post:
      summary: Create search request for organizations
      operationId: post-organizations-searches
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationProfilesPage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      description: >-
        Create search request for organizations by provided criteria.


        You can use the following attributes as a
        `search_criteria[*].filter_key` for filtering:


        - `name` - filter by organization name.

        - `slug` - filter by organization slug.

        - `type` - filter by organization type.

        - `created_at` - filter by creation date.

        - `updated_at` - filter by last update date.

        - `users` - filter by the number of users.

        - `projects` - filter by the number of projects.

        - `launches` - filter by the number of launches.

        - `last_launch_occurred` - filter by the last launch occurrence.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchCriteriaRQ'
        description: ''
      tags:
        - Organization
        - Ready for implementation
      x-extension-authority:
        - ReportPortal: User
        - ReportPortal: Admin
      security:
        - BearerAuth: []
  /organizations/{org_id}/projects/searches:
    parameters:
      - $ref: '#/components/parameters/OrganizationId'
    post:
      summary: Create search request for organization projects
      operationId: post-organizations-org_id-projects-searches
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationProjectsPage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      description: >-
        Create search request for organization projects by provided criteria.


        You can use the following attributes as a
        `search_criteria[*].filter_key` for filtering:


        - `name` - filter by project name.

        - `slug` - filter by project slug.

        - `key` - filter by project key.

        - `created_at` - filter by creation date.

        - `updated_at` - filter by last update date.

        - `users` - filter by the number of users.

        - `launches` - filter by the number of launches.

        - `last_launch_occurred` - filter by the last launch occurrence.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchCriteriaRQ'
      tags:
        - Organization Project
        - Ready for implementation
      security:
        - BearerAuth: []
  /invitations:
    post:
      summary: Create user invitation
      operationId: post-invitations
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Invitation ID.
                    format: uuid
                  email:
                    type: string
                    description: User's email.
                  status:
                    type: string
                    enum:
                      - PENDING
                      - ACTIVATED
                    description: User invitations status.
                  link:
                    type: string
                    description: Link to invitation form.
                  created_at:
                    type: string
                    format: date-time
                    description: Creation date.
                  expires_at:
                    type: string
                    format: date-time
                    description: Experation date.
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '503':
          description: Service Unavailable
      description: Create and send user invitation to email.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Email for invitation.
                organizations:
                  type: array
                  description: Organizations to assign a user.
                  items:
                    $ref: '#/components/schemas/UserOrgInfo'
                projects:
                  type: array
                  description: Projects to assign a user.
                  items:
                    $ref: '#/components/schemas/UserProjectInfo'
              required:
                - email
        description: ''
      tags:
        - Invitation
      security:
        - BearerAuth: []
    get:
      summary: Get invitations
      operationId: get-invitations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Offset'
                  - $ref: '#/components/schemas/Invitations'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Order'
        - schema:
            type: string
            default: email
          in: query
          name: sort
        - schema:
            type: string
            format: email
          in: query
          name: email
      description: Get all invitations
      tags:
        - Invitation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
      security:
        - BearerAuth: []
  /invitations/{id}:
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get invitation
      tags:
        - Invitation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      operationId: get-invitations-id
      description: Get invitation by ID.
      security:
        - BearerAuth: []
    put:
      summary: Activate invitation
      operationId: put-invitations-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: Invitation ID.
                  user_id:
                    type: integer
                    format: int64
                    description: Created user ID.
                  email:
                    type: string
                    format: email
                    description: User email.
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Create user from invitation.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - ACTIVATED
                    - PENDING
                  description: Change status to ACTIVATED to create a user.
                  default: PENDING
                email:
                  type: string
                  description: New email.
                  format: email
                full_name:
                  type: string
                  description: User full name.
                password:
                  type: string
                  format: password
                  description: User password. Will be ignored for `PENDING` status.
              required:
                - password
        description: ''
      tags:
        - Invitation
      security:
        - BearerAuth: []
components:
  schemas:
    OrganizationProfilesPage:
      title: OrganizationProfilesPage
      allOf:
        - $ref: '#/components/schemas/Offset'
        - $ref: '#/components/schemas/OrganizationProfilesList'
    OrganizationProfilesList:
      title: List of organization profiles
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationProfile'
      type: object
    OrganizationProfile:
      title: Organization profile
      description: A comprehensive set of organization information.
      allOf:
        - $ref: '#/components/schemas/OrganizationInfo'
        - $ref: '#/components/schemas/OrganizationRelation'
    OrganizationInfo:
      title: Organization
      description: Various information about the organization information.
      allOf:
        - $ref: '#/components/schemas/OrganizationDetails'
        - $ref: '#/components/schemas/OrganizationMetadata'
    OrganizationDetails:
      title: Organization definition
      description: >
        Basic information provided by the client.


        A `slug` is a unique identifying part of an organization. Generated
        according to the organization name if not specified by the user.
      type: object
      properties:
        name:
          type: string
          description: Organization display name.
          minLength: 3
          maxLength: 60
          pattern: ^[A-Za-z0-9._\- ]+$
        slug:
          type: string
          pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
          minLength: 3
          maxLength: 60
          description: >-
            A slug is used to identify a resource. It should be unique and
            contain only lowercase letters, numbers, and hyphens. It should not
            start or end with a hyphen.
          nullable: true
      required:
        - name
    OrganizationMetadata:
      title: Organization metadata
      description: Organization metadata. Represent generated fields.
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Organization ReportPortal identifier.
          minimum: 0
        type:
          type: string
          enum:
            - INTERNAL
            - PERSONAL
            - EXTERNAL
          description: >-
            Type for automatization purposes.


            There are three types:

            - INTERNAL: created by API request.

            - PERSONAL: created for a user after the user creating. Only
            Enterprise edition feature.

            - EXTERNAL: created for external integrations.
        external_id:
          type: string
          description: |-
            External organization identifier.
            It is created for integration.
        created_at:
          type: string
          format: date-time
          description: Creation date.
        updated_at:
          type: string
          format: date-time
          description: Last update date.
    OrganizationRelation:
      title: Organization relations
      type: object
      description: >-
        A relationship object contains members that represent a relationship of
        the organization.


        Represents [JSON:API relationships
        object](https://jsonapi.org/format/#document-resource-object-relationships).
        We use only `links` and `meta` objects.
      properties:
        relationships:
          type: object
          properties:
            users:
              type: object
              description: General information about the organization users.
              properties:
                meta:
                  type: object
                  properties:
                    count:
                      type: integer
                      minimum: 0
                      description: Total count of users in the organization.
            projects:
              type: object
              description: General information about the organization projects.
              properties:
                meta:
                  type: object
                  properties:
                    count:
                      type: integer
                      minimum: 0
                      description: Total count of projects in the organization.
            launches:
              type: object
              description: General information about the organization launches.
              properties:
                meta:
                  type: object
                  properties:
                    last_occurred_at:
                      type: string
                      format: date-time
                      description: Last launch occurrence date.
                    count:
                      type: integer
                      minimum: 0
                      description: |-
                        Total count of launches in the organization.
                        Access: Admin, Manager
            billing:
              type: object
              description: |-
                General information about the organization billing.
                Available only if a Billing plugin is enabled.
              properties:
                meta:
                  type: object
                  properties:
                    plan_name:
                      type: string
                      description: Plan name.
                    storage_usage:
                      type: integer
                      minimum: 0
                      description: Storage usage in percents.
                      maximum: 100
    OrganizationUsersPage:
      title: List of organization users
      allOf:
        - $ref: '#/components/schemas/Offset'
        - $ref: '#/components/schemas/OrganizationUsersList'
    OrganizationUsersList:
      title: OrganizationUsersList
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationUserInfo'
      required:
        - items
    OrganizationUserInfo:
      title: Organization user profile
      allOf:
        - $ref: '#/components/schemas/UserAccountInfo'
        - $ref: '#/components/schemas/OrganizationUserAttributes'
        - $ref: '#/components/schemas/OrganizationUserMetadata'
        - $ref: '#/components/schemas/OrganizationUserRelation'
      description: >-
        A comprehensive set of user information related to a user's
        organization.
    OrganizationUserDefinition:
      title: Organization user definition
      description: Base information about user in organization.
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email. Unique ID in an organization.
    OrganizationUserAttributes:
      title: Organization user details
      type: object
      description: Basic information about a user in the organization.
      properties:
        organization_role:
          type: string
          enum:
            - MEMBER
            - MANAGER
          description: Organization user role.
      required:
        - email
        - organization_role
    OrganizationUserMetadata:
      title: Organization user metadata
      allOf:
        - properties:
            assigned_at:
              type: string
              format: date-time
              description: |-
                A time when a user was assigned to
                the organization.
      description: User's organization metadata. Represent generated fields.
      type: object
    OrganizationUserRelation:
      title: Organization user relations
      type: object
      description: >-
        A relationship object contains members that represent a relationship of
        the user in the organization.


        Represents [JSON:API relationships
        object](https://jsonapi.org/format/#document-resource-object-relationships).
        We use only `links` and `meta` objects.
      properties:
        relationships:
          type: object
          properties:
            projects:
              type: object
              description: User's projects relations.
              properties:
                meta:
                  type: object
                  description: User's projects relation metadata.
                  properties:
                    count:
                      type: integer
                      minimum: 0
                      description: |-
                        Total number of user's projects in
                        organization.
    OrganizationProjectsPage:
      title: List of organization projects
      allOf:
        - $ref: '#/components/schemas/Offset'
        - $ref: '#/components/schemas/OrganizationProjectsList'
    OrganizationProjectsList:
      title: OrganizationProjectsList
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProjectProfile'
      required:
        - items
    OrganizationProjectInfo:
      title: OrganizationProjectInfo
      allOf:
        - $ref: '#/components/schemas/ProjectMetadata'
        - $ref: '#/components/schemas/ProjectDetails'
    OrganizationRetentionPolicy:
      title: Organization retention policy
      type: object
      description: '#TODO'
      properties:
        log_retention_period:
          type: string
          format: duration
          description: '#TODO'
        launch_retention_period:
          type: string
          format: duration
          description: '#TODO'
        attachment_retention_period:
          type: string
          format: duration
          description: '#TODO'
    OrganizationNotificationPolicy:
      title: Organization notification policy
      type: object
      properties:
        auto_notification:
          type: boolean
    OrganizationNotifyRulesList:
      title: List of organization notification rules
      allOf:
        - $ref: '#/components/schemas/Offset'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/OrganizationNotifyRule'
      description: ''
    OrganizationNotifyRule:
      title: Organization notification rule
      allOf:
        - type: object
          properties:
            id:
              type: string
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
        - $ref: '#/components/schemas/OrganizationNotifyRuleDefinition'
      description: '#TODO'
    OrganizationNotifyRuleDefinition:
      title: Notification rule definition
      type: object
      description: '#TODO'
      properties:
        name:
          type: string
          description: '#TODO'
        enabled:
          type: boolean
          description: '#TODO'
        conditions:
          type: object
          description: '#TODO'
          properties:
            launch:
              type: object
              description: '#TODO'
              properties:
                names:
                  type: array
                  description: '#TODO'
                  items:
                    type: string
                attributes:
                  type: array
                  description: '#TODO'
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                      value:
                        type: string
                attributes_operator:
                  type: string
                  enum:
                    - AND
                    - OR
                  default: AND
                  description: '#TODO'
                result_condition:
                  type: string
                  enum:
                    - ALWAYS
                    - FAILED
                    - TO_INVESTIGATE
                    - MORE_10
                    - MORE_20
                    - MORE_50
                  description: '#TODO'
        actions:
          allOf:
            - $ref: '#/components/schemas/SendEmail'
          description: '#TODO'
    OrganizationSearchCriteria:
      title: Organization search criteria
      allOf:
        - properties:
            sort:
              type: string
              description: Field to define the sort field.
              default: name
            search_criteria:
              type: array
              items:
                type: object
                properties:
                  filter_key:
                    type: string
                    enum:
                      - name
                      - slug
                      - type
                      - created_at
                      - updated_at
                      - Organization User
                      - Organization Project
                      - launches
                      - last_launch_occurred
      description: >-
        You can use the following attributes as a
        `search_criteria[*].filter_key` for filtering:


        - `name` - filter by organization name.

        - `slug` - filter by organization slug.

        - `type` - filter by organization type.

        - `created_at` - filter by creation date.

        - `updated_at` - filter by last update date.

        - `users` - filter by the number of users.

        - `projects` - filter by the number of projects.

        - `launches` - filter by the number of launches.

        - `last_launch_occurred` - filter by the last launch occurrence.
      type: object
    OrganizationProjectSearchCriteria:
      title: Organization project search criteria
      allOf:
        - properties:
            sort:
              type: string
              description: Field to define the sort field.
              default: name
            search_criteria:
              type: array
              items:
                type: object
                properties:
                  filter_key:
                    type: string
                    enum:
                      - name
                      - slug
                      - key
                      - created_at
                      - updated_at
                      - Organization User
                      - launches
                      - last_launch_occurred
      description: >-
        You can use the following attributes as a
        `search_criteria[*].filter_key` for filtering:


        - `name` - filter by project name.

        - `slug` - filter by project slug.

        - `key` - filter by project key.

        - `created_at` - filter by creation date.

        - `updated_at` - filter by last update date.

        - `users` - filter by the number of users.

        - `launches` - filter by the number of launches.

        - `last_launch_occurred` - filter by the last launch occurrence.
      type: object
    Offset:
      type: object
      title: Offset-based
      description: Offset-based pagination
      properties:
        offset:
          type: integer
          description: The offset used for this page of results.
          minimum: 0
          default: 0
        limit:
          type: integer
          description: >-
            The limit used for this page of results. This will be the same as
            the limit query parameter unless it exceeded the maximum value
            allowed for this API endpoint.
          minimum: 0
          default: 300
        total_count:
          type: integer
          description: >-
            One greater than the offset of the last item in the entire
            collection. The total number of items in the collection may be less
            than total_count.
          minimum: 0
        sort:
          type: string
          description: Field to define the sort field.
        order:
          type: string
          description: To indicate sorting direction. Ascending or Descending.
          enum:
            - ASC
            - DESC
      required:
        - offset
        - limit
    Problem:
      title: Problem
      type: object
      description: >-
        Problem Details for HTTP APIs [RFC
        9457](https://tools.ietf.org/html/rfc9457).


        A Problem JSON object uses the media type `application/problem+json`.
      properties:
        type:
          type: string
          format: uri-reference
          description: >
            A URI reference that uniquely identifies the problem type only in
            the context of the provided API. Opposed to the specification in
            RFC-9457, it is neither recommended to be dereferenceable and point
            to a human-readable documentation nor globally unique for the
            problem type.
          default: about:blank
          example: /problems/user-authorization-failed
        title:
          type: string
          description: >
            A short summary of the problem type. Written in English and readable
            for engineers, usually not suited for non technical stakeholders and
            not localized.
          example: some title for the error situation
        status:
          type: integer
          format: int32
          description: >
            The HTTP status code generated by the origin server for this
            occurrence of the problem.
          minimum: 100
          exclusiveMaximum: true
          maximum: 600
        detail:
          type: string
          description: >
            A human readable explanation specific to this occurrence of the
            problem that is helpful to locate the problem and give advice on how
            to proceed. Written in English and readable for engineers, usually
            not suited for non technical stakeholders and not localized.
          example: some description for the error situation
        instance:
          type: string
          format: uri-reference
          description: >
            A URI reference that identifies the specific occurrence of the
            problem, e.g. by adding a fragment identifier or sub-path to the
            problem type. May be used to locate the root of this problem in the
            source code.
          example: /some/uri-reference#specific-occurrence-context
    UserDetails:
      title: User details
      description: |-
        Contains details associated with a user account.

        User has a unique email address, full name, and account type.

        Account type can be either `ADMIN` or `USER`.
        Only `ADMIN` users have access to change account type.
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email.
        full_name:
          type: string
          description: User full name.
        instance_role:
          type: string
          enum:
            - ADMINISTRATOR
            - USER
          description: Instance account role.
        external_id:
          type: string
          description: User external identifier. Provided by external systems.
    UserMetadata:
      title: User metadata
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: User internal identifier.
          minimum: 0
        uuid:
          type: string
          format: uuid
          description: User ID for external systems.
        created_at:
          type: string
          format: date-time
          description: When user's account was created.
        updated_at:
          type: string
          format: date-time
          description: When user's data was modifed.
        last_login_at:
          type: string
          format: date-time
          description: When user last logged in.
        auth_provider:
          type: string
          description: |-
            Indicates through which service or
            authentication method the user account
            was created.
          enum:
            - INTERNAL
            - UPSA
            - GITHUB
            - LDAP
            - SAML
            - SCIM
          default: INTERNAL
    UserAccountInfo:
      title: User account info
      allOf:
        - $ref: '#/components/schemas/UserDetails'
        - $ref: '#/components/schemas/UserMetadata'
    UserProjectInfo:
      title: User's project details
      description: Information about user's project.
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Project internal identifier.
          minimum: 0
        role:
          type: string
          description: User role in the project.
          enum:
            - EDITOR
            - VIEWER
          default: VIEWER
    UserProjectsList:
      title: UserProjectsList
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserProjectInfo'
    EventStatus:
      title: Event status
      type: object
      description: |-
        Event status object used to represent the status of a request item in
        bulk operations.
      properties:
        href:
          type: string
          description: Identifier of a request item.
        status:
          type: object
          description: |-
            Object indicating the execution status of
            the request item.
          properties:
            code:
              type: integer
              format: int32
              description: HTTP status code indicating the resource's status.
              minimum: 100
              exclusiveMaximum: true
              maximum: 600
            description:
              type: string
              description: |-
                Human readable status description and containing additional
                              context information about failures etc.
      required:
        - href
        - status
    Multistatus:
      title: Multistatus
      type: object
      properties:
        multistatus:
          type: object
          properties:
            responses:
              type: array
              items:
                $ref: '#/components/schemas/EventStatus'
    PatchObject:
      title: Patch Operation Object
      type: object
      properties:
        op:
          type: string
          enum:
            - add
            - replace
            - delete
        path:
          type: string
        value:
          type: object
    PatchArrayString:
      title: Patch Operation Array String
      type: object
      properties:
        op:
          type: string
          enum:
            - add
            - replace
            - delete
        path:
          type: string
        value:
          type: array
          items:
            type: string
    PatchString:
      title: Patch Operation String
      type: object
      properties:
        op:
          type: string
          enum:
            - add
            - replace
            - delete
        path:
          type: string
        value:
          type: string
    PatchNumber:
      title: Patch Operation Number
      type: object
      properties:
        op:
          type: string
          enum:
            - add
            - replace
            - delete
        path:
          type: string
        value:
          type: number
    PatchInteger:
      title: Patch Operation Integer
      type: object
      properties:
        op:
          type: string
          enum:
            - add
            - replace
            - delete
        path:
          type: string
        value:
          type: integer
    PatchBoolean:
      title: Patch Operation Boolean
      type: object
      properties:
        op:
          type: string
          enum:
            - add
            - replace
            - delete
        path:
          type: string
        value:
          type: boolean
    PatchOperation:
      title: Patch Operation Object
      oneOf:
        - $ref: '#/components/schemas/PatchObject'
        - $ref: '#/components/schemas/PatchArrayString'
        - $ref: '#/components/schemas/PatchString'
        - $ref: '#/components/schemas/PatchNumber'
        - $ref: '#/components/schemas/PatchInteger'
        - $ref: '#/components/schemas/PatchBoolean'
      description: ''
    ProjectMetadata:
      title: Project metadata
      type: object
      properties:
        id:
          type: integer
          description: Project internal identifier.
          format: int64
          minimum: 0
        key:
          type: string
          description: |-
            Unique identifying part of a project in
            an instance.
            Generated from an organization
            slug and project slug.
        organization_id:
          type: integer
          format: int64
          description: Organization ID to which the project belongs.
          minimum: 0
        created_at:
          type: string
          format: date-time
          description: Timestamp when project was created.
        updated_at:
          type: string
          format: date-time
          description: Timestamp when project was last updated.
    ProjectDetails:
      title: Project details
      type: object
      properties:
        name:
          type: string
          description: Display project name.
          minLength: 3
          maxLength: 60
          pattern: ^[A-Za-z0-9._\- ]+$
        slug:
          type: string
          pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
          minLength: 3
          maxLength: 60
          nullable: true
      required:
        - name
    ProjectRelationships:
      title: Project relationships
      type: object
      properties:
        relationships:
          type: object
          properties:
            users:
              type: object
              description: Users assigned to the project.
              properties:
                meta:
                  type: object
                  properties:
                    count:
                      type: integer
                      minimum: 0
                      description: Total number of users assigned to the project.
            launches:
              type: object
              description: Launches associated with the project.
              properties:
                meta:
                  type: object
                  properties:
                    last_occurred_at:
                      type: string
                      description: >-
                        The date and time of the last launch occurred in the
                        project.
                      format: date-time
                    count:
                      type: integer
                      minimum: 0
                      description: Total number of launches in the project.
            billing:
              type: object
              description: >-
                Billing information of the project. Available only if the
                billing plugin is enabled.
              properties:
                meta:
                  type: object
                  properties:
                    storage_usage:
                      type: integer
                      minimum: 0
                      maximum: 100
                      description: The percentage of storage used by the project.
      description: Information about the relationships of a project.
    ProjectProfile:
      title: Project profile
      allOf:
        - $ref: '#/components/schemas/ProjectMetadata'
        - $ref: '#/components/schemas/ProjectDetails'
        - $ref: '#/components/schemas/ProjectRelationships'
      description: Comprehensive information about a project.
    SendEmail:
      title: Send email
      type: object
      description: This action sends an email notification to specified recipients.
      properties:
        send_email:
          type: object
          properties:
            recipients:
              type: array
              format: email
              items:
                type: string
                format: email
            subject:
              type: string
            body:
              type: string
    OffsetRequest:
      type: object
      title: Offset-based
      description: Offset-based pagination
      properties:
        offset:
          type: integer
          description: The offset used for this page of results.
          minimum: 0
          default: 0
        limit:
          type: integer
          description: >-
            The limit used for this page of results. This will be the same as
            the limit query parameter unless it exceeded the maximum value
            allowed for this API endpoint.
          minimum: 0
          default: 300
        sort:
          type: string
          description: Field to define the sort field.
        order:
          type: string
          description: To indicate sorting direction. Ascending or Descending.
          enum:
            - ASC
            - DESC
          default: ASC
    SearchCriteria:
      title: Search criteria
      type: object
      properties:
        search_criteria:
          type: array
          items:
            type: object
            properties:
              filter_key:
                type: string
                description: search by field
              operation:
                type: string
                enum:
                  - EQ
                  - NE
                  - CNT
                  - NON_CNT
                  - BTW
                  - IN
                description: operation to perform for the filter
              value:
                type: string
                description: search value
    SearchCriteriaRQ:
      title: SearchCriteria
      allOf:
        - $ref: '#/components/schemas/OffsetRequest'
        - $ref: '#/components/schemas/SearchCriteria'
    Invitation:
      title: Invitation
      type: object
      properties:
        id:
          type: string
          description: Invitation ID.
          format: uuid
        email:
          type: string
          description: User's email.
        status:
          type: string
          enum:
            - PENDING
          description: User invitations status.
        link:
          type: string
          description: Link to invitation form.
        created_at:
          type: string
          format: date-time
          description: Creation date.
        expires_at:
          type: string
          format: date-time
          description: Experation date.
    Invitations:
      title: InvitationsList
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Invitation'
    UserOrgInfo:
      title: User's organization details
      type: object
      description: Information about user's organization.
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          description: Organization internal identifier.
        role:
          type: string
          enum:
            - MEMBER
            - MANAGER
          default: MEMBER
          description: User role in the organization.
  parameters:
    OrganizationId:
      name: org_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
      description: Organization identifier
    UserId:
      name: user_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
      description: User identifier
    ProjectId:
      name: project_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
      description: Project identifier
    Offset:
      name: offset
      in: query
      required: false
      schema:
        type: integer
        default: 0
      description: The offset used for this page of results
    Limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        default: 300
      description: >-
        The limit used for this page of results. This will be the same as the
        limit query parameter unless it exceeded the maximum value allowed for
        this API endpoint
    Order:
      name: order
      in: query
      schema:
        type: string
        enum:
          - ASC
          - DESC
        default: ASC
      description: Indicate sorting direction
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: Bearer token for authentication

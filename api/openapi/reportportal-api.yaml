# !!!DO NOT EDIT IT DIRECTLY!!!
# This is an autogenerated file.
# Any changes made to this file will be overwritten.
# Please make changes to the source files and regenerate this file.
openapi: 3.0.3
info:
  title: ReportPortal Reference API
  version: Reference
  description: >
    ![reportportal-logo](https://reportportal.io/docs/img/logo.svg)


    This is the API documentation for ReportPortal. We describe this
    documentation

    following our [API
    Principles](https://github.com/reportportal/reportportal-common-api/blob/main/docs/api-principles.md)

    and [RESTful API
    Guidelines](https://opensource.zalando.com/restful-api-guidelines/).


    Because this documentation is created according to the

    [API design first
    approach](https://swagger.io/resources/articles/adopting-an-api-first-approach/),

    it doesn't contain information about all existing endpoints. There are only
    pre-designed endpoints.

    If you want to see the full documentation, you can check

    the [Auto-generated API
    documentation](https://reportportal.io/docs/category/api/service-api).


    # Introduction


    ReportPortal is a service for continuous testing.

    It provides a platform for test automation and allows you to analyze

    the results of tests in various ways. The service is implemented as a web

    application and is available through a web interface or API.


    # Authentication


    ReportPortal uses the [JWT](https://jwt.io/) authentication protocol for UI
    client requests and

    the [API
    Key](https://reportportal.io/docs/reportportal-configuration/HowToGetAnAccessTokenInReportPortal/#2-authorization-with-users-api-key-for-agents)

    for agent requests.


    Both approaches use the same security scheme: `Bearer`.
  contact:
    name: ReportPortal Team
    email: support@reportportal.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: '{host}{basePath}'
    description: ReportPortal server
    variables:
      host:
        default: https://demo.reportportal.io
        description: Host name and port (if needed) of Report Portal server
      basePath:
        default: /api
        description: Base path of Report Portal API
tags:
  - name: groups
    description: API for managing groups and their members.
    x-displayName: groups
  - name: projects
    description: API for working with projects.
    x-displayName: projects
paths:
  /groups:
    get:
      summary: Get all groups
      operationId: getGroups
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
      description: |-
        Get instance groups with optional filtering and sorting.

        ### Authority

        - `ADMINISTRATOR`
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Order'
        - schema:
            type: string
            default: name
          in: query
          name: sort
          description: Indicate sort by field.
      tags:
        - groups
      security:
        - BearerAuth: []
    post:
      summary: Create a group
      operationId: createGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupInfo'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '409':
          $ref: '#/components/responses/Error'
      description: |-
        Create a group.

        ### Authority

        - `ADMINISTRATOR`
      tags:
        - groups
      security:
        - BearerAuth: []
  /groups/{group_id}:
    parameters:
      - $ref: '#/components/parameters/GroupId'
    get:
      summary: Get group
      operationId: getGroupById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupInfo'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: |-
        Get a group by ID.

        ### Authority

        - `ADMINISTRATOR`
      tags:
        - groups
      security:
        - BearerAuth: []
    put:
      summary: Update group
      operationId: updateGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupRequest'
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '409':
          $ref: '#/components/responses/Error'
      description: |-
        Update a group by ID.

        ### Authority

        - `ADMINISTRATOR`
      tags:
        - groups
      security:
        - BearerAuth: []
    delete:
      summary: Delete group
      operationId: deleteGroup
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: |-
        Delete a group by ID.

        ### Authority

        - `ADMINISTRATOR`
      tags:
        - groups
      security:
        - BearerAuth: []
  /groups/{group_id}/users:
    parameters:
      - $ref: '#/components/parameters/GroupId'
    get:
      summary: Get all group users
      operationId: getGroupUsers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupUsersPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: |-
        Get all users of group.

        ### Authority

        - `ADMINISTRATOR`
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      tags:
        - groups
      security:
        - BearerAuth: []
  /groups/{group_id}/users/{user_id}:
    parameters:
      - $ref: '#/components/parameters/GroupId'
      - $ref: '#/components/parameters/UserId'
    get:
      summary: Get group user
      operationId: getGroupUserById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupUserInfo'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: |-
        Get all users of group.

        ### Authority

        - `ADMINISTRATOR`
      tags:
        - groups
      security:
        - BearerAuth: []
    delete:
      summary: Delete group user
      operationId: deleteUserFromGroupById
      description: |-
        Delete a user from a group.

        ### Authority

        - `ADMINISTRATOR`
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      tags:
        - groups
      security:
        - BearerAuth: []
    put:
      summary: Add group user
      operationId: addUserToGroupById
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: |-
        Add user into group.

        ### Authority

        - `ADMINISTRATOR`
      tags:
        - groups
      security:
        - BearerAuth: []
  /groups/{group_id}/projects:
    parameters:
      - $ref: '#/components/parameters/GroupId'
    get:
      summary: Get all group projects
      operationId: getGroupProjects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupProjectsPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: |-
        Get all projects of group.

        ### Authority

        - `ADMINISTRATOR`
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      tags:
        - groups
      security:
        - BearerAuth: []
  /groups/{group_id}/projects/{project_id}:
    parameters:
      - $ref: '#/components/parameters/GroupId'
      - $ref: '#/components/parameters/ProjectId'
    get:
      summary: Get group project
      description: |-
        Get project of group.

        ### Authority

        - `ADMINISTRATOR`
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupProjectInfo'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: getGroupProjectById
      tags:
        - groups
      security:
        - BearerAuth: []
    put:
      summary: Add or update group project
      operationId: addProjectToGroupById
      description: |-
        Add or update project in group.

        ### Authority

        - `ADMINISTRATOR`
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                permission:
                  $ref: '#/components/schemas/projectRole'
      tags:
        - groups
      security:
        - BearerAuth: []
    delete:
      summary: Delete group project
      operationId: deleteProjectFromGroupById
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: |-
        Delete project from group.

        ### Authority

        - `ADMINISTRATOR`
      tags:
        - groups
      security:
        - BearerAuth: []
  /projects/{project_name}/groups:
    parameters:
      - schema:
          type: string
        name: project_name
        in: path
        required: true
        description: Project name.
    get:
      summary: Get all groups of project
      operationId: getGroupsOfProject
      tags:
        - projects
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectGroupsPage'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      description: |-
        Get all groups of project.

        ### Authority

        - `ADMINISTRATOR`
        - `PROJECT MANAGER`
        - `MEMBER`
        - `OPERATOR`
      security:
        - BearerAuth: []
  /projects/{project_name}/groups/{group_id}:
    parameters:
      - schema:
          type: string
        name: project_name
        in: path
        required: true
        description: Project name.
      - $ref: '#/components/parameters/GroupId'
    get:
      summary: Get group by id
      description: |-
        Get group by id from project.

        ### Authority

        - `ADMINISTRATOR`
        - `PROJECT MANAGER`
      operationId: getProjectGroupById
      tags:
        - projects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectGroupInfo'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
    put:
      summary: Add or update group to project
      description: |-
        Add or update group to project with permission.

        ### Authority

        - `ADMINISTRATOR`
        - `PROJECT MANAGER`
      operationId: AddGroupToProjectById
      tags:
        - projects
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                permission:
                  $ref: '#/components/schemas/projectRole'
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
    delete:
      operationId: DeleteGroupFromProjectById
      x-permissions:
        - role: ADMINISTRATOR
          access: full
        - role: PROJECT MANAGER
          access: full
      summary: Delete group from project by id
      description: |-
        Delete group from project by id.

        ### Authority

        - `ADMINISTRATOR`
        - `PROJECT MANAGER`
      tags:
        - projects
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
  /projects/{project_name}/log-types:
    parameters:
      - schema:
          type: string
        name: project_name
        in: path
        description: Project name.
        required: true
    get:
      summary: Get log types of project
      operationId: getLogTypes
      x-permissions:
        - role: ADMINISTRATOR
          access: full
        - role: PROJECT MANAGER
          access: full
        - role: MEMBER
          access: full
        - role: OPERATOR
          access: full
        - role: CUSTOMER
          access: read
      tags:
        - projects
      description: |-
        Get log types of project.

        ### Authority

        - `ADMINISTRATOR`
        - `PROJECT MANAGER`
        - `MEMBER`
        - `OPERATOR`
        - `CUSTOMER`
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: List of available log types for the project.
                    type: array
                    items:
                      $ref: '#/components/schemas/LogType'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
    post:
      summary: Create new log type
      operationId: createLogType
      x-permissions:
        - role: ADMINISTRATOR
          access: full
        - role: PROJECT MANAGER
          access: full
      tags:
        - projects
      description: |-
        Create new log type in project.

        ### Authority

        - `ADMINISTRATOR`
        - `PROJECT MANAGER`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogType'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogType'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
  /projects/{project_name}/log-types/{log_type_id}:
    parameters:
      - schema:
          type: string
        name: project_name
        in: path
        required: true
        description: Project name.
      - schema:
          type: integer
          format: int64
          minimum: 1
        name: log_type_id
        in: path
        required: true
        description: Log type identifier.
    get:
      summary: Get log type by id
      operationId: getLogTypeById
      x-permissions:
        - role: ADMINISTRATOR
          access: full
        - role: PROJECT MANAGER
          access: full
        - role: MEMBER
          access: full
        - role: OPERATOR
          access: full
        - role: CUSTOMER
          access: full
      tags:
        - projects
      description: |-
        Get log type in project by id.

        ### Authority
        - `ADMINISTRATOR`
        - `PROJECT MANAGER`
        - `MEMBER`
        - `OPERATOR`
        - `CUSTOMER`
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogType'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
    put:
      summary: Update log type
      operationId: updateLogTypeById
      x-permissions:
        - role: ADMINISTRATOR
          access: full
        - role: PROJECT MANAGER
          access: full
      tags:
        - projects
      description: |-
        Update log type in project by id.

        ### Authority

        - `ADMINISTRATOR`
        - `PROJECT MANAGER`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogType'
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
    delete:
      summary: Delete log type
      operationId: deleteLogTypeById
      x-permissions:
        - role: ADMINISTRATOR
          access: full
        - role: PROJECT MANAGER
          access: full
      tags:
        - projects
      description: |-
        Delete log type from project by id.

        ### Authority

        - `ADMINISTRATOR`
        - `PROJECT MANAGER`
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '402':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      security:
        - BearerAuth: []
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    GroupPage:
      title: Group page
      allOf:
        - $ref: '#/components/schemas/Offset'
        - properties:
            items:
              type: array
              description: List of groups.
              items:
                $ref: '#/components/schemas/GroupInfo'
      description: Page of groups.
      type: object
    CreateGroupRequest:
      title: Create group request
      allOf:
        - $ref: '#/components/schemas/GroupBase'
      description: Create group request.
    UpdateGroupRequest:
      title: Update group request
      allOf:
        - $ref: '#/components/schemas/GroupBase'
      description: Update group request.
    GroupUsersPage:
      title: Group users page
      allOf:
        - $ref: '#/components/schemas/Offset'
        - type: object
          properties:
            items:
              type: array
              description: List of group users.
              items:
                $ref: '#/components/schemas/GroupUserInfo'
      description: Page of group users.
    GroupProjectsPage:
      title: Group projects page
      allOf:
        - $ref: '#/components/schemas/Offset'
        - type: object
          properties:
            items:
              type: array
              description: List of group projects.
              items:
                $ref: '#/components/schemas/GroupProjectInfo'
      description: Page of group projects.
    GroupUserInfo:
      title: Group user
      description: Information about a user as a group member.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/identifier'
        uuid:
          type: string
          format: uuid
          description: User identifier for external systems.
        email:
          type: string
          format: email
          description: User email.
        full_name:
          $ref: '#/components/schemas/name'
        external_id:
          type: string
          description: External user identifier.
        instance_role:
          $ref: '#/components/schemas/instanceRole'
        active:
          type: boolean
          description: User activity status.
        account_type:
          $ref: '#/components/schemas/accountType'
        added_at:
          type: string
          format: date-time
          description: Timestamp of user adding to group.
    GroupProjectInfo:
      title: Group project
      description: Information about a project as a group member.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/identifier'
        name:
          $ref: '#/components/schemas/name'
        permission:
          $ref: '#/components/schemas/projectRole'
        added_at:
          type: string
          format: date-time
          description: Timestamp of project adding to group.
        updated_at:
          type: string
          format: date-time
          description: Timestamp of project updating in group.
    order:
      title: Order
      type: string
      enum:
        - ASC
        - DESC
      description: To indicate sorting direction. Ascending or Descending.
    Offset:
      type: object
      title: Offset-based
      description: Offset-based pagination
      properties:
        offset:
          type: integer
          description: The offset used for this page of results.
          minimum: 0
          default: 0
        limit:
          type: integer
          description: >-
            The limit used for this page of results. This will be the same as
            the limit query parameter unless it exceeded the maximum value
            allowed for this API endpoint.
          minimum: 0
          default: 300
        total_count:
          type: integer
          description: >-
            One greater than the offset of the last item in the entire
            collection. The total number of items in the collection may be less
            than total_count.
          minimum: 0
        sort:
          type: string
          description: Field to define the sort field.
        order:
          $ref: '#/components/schemas/order'
    identifier:
      title: Identifier
      type: integer
      format: int64
      minimum: 1
      description: Resource identifier.
      readOnly: true
    name:
      title: name
      type: string
      description: Display name.
      minLength: 3
      maxLength: 60
      pattern: ^[A-Za-z0-9.'_\- ]+$
    slug:
      title: slug
      type: string
      pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
      description: >-
        A slug is used to identify a resource.

        It should be unique and contain only lowercase letters, numbers, and
        hyphens.

        It should not start or end with a hyphen.
      minLength: 3
      maxLength: 60
    GroupInfo:
      title: Group information
      description: Group information.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/identifier'
          description: Group identifier.
        uuid:
          type: string
          format: uuid
          description: Global identifier of the group.
        name:
          $ref: '#/components/schemas/name'
        slug:
          $ref: '#/components/schemas/slug'
        created_by:
          type: integer
          format: int64
          description: User ID of the user who created the group.
        created_at:
          type: string
          format: date-time
          description: Timestamp when group was created.
        updated_at:
          type: string
          format: date-time
          description: Timestamp when group was last updated.
        stats:
          type: object
          description: Group statistics.
          properties:
            users_count:
              type: integer
              format: int32
              description: Number of users in the group.
            projects_count:
              type: integer
              format: int32
              description: Number of projects in the group.
    Error:
      title: Error
      x-stoplight:
        id: nqpvj1j8iejqm
      type: object
      description: ReportPortal Error
      properties:
        errorCode:
          type: integer
          x-stoplight:
            id: q1zgdpg7y5da5
          format: int64
          minimum: 4000
        message:
          type: string
          x-stoplight:
            id: muq0ixf8kpi64
    GroupBase:
      title: Group details
      type: object
      properties:
        name:
          $ref: '#/components/schemas/name'
        slug:
          $ref: '#/components/schemas/slug'
      required:
        - name
    instanceRole:
      title: Instance role
      type: string
      enum:
        - ADMINISTRATOR
        - USER
      default: USER
      description: Instance account role.
    accountType:
      title: Account type
      type: string
      enum:
        - INTERNAL
        - UPSA
        - GITHUB
        - LDAP
        - SAML
        - SCIM
      default: INTERNAL
      description: |-
        Indicates through which service or
        authentication method the user account
        was created.

        - INTERNAL: created by the system for internal use.
        - UPSA: created for external integrations.
        - GITHUB: created for external integrations.
        - LDAP: created for external integrations.
        - SAML: created for external integrations.
        - SCIM: created for external integrations.
    projectRole:
      title: Project role
      type: string
      description: Role in the project.
      enum:
        - PROJECT_MANAGER
        - MEMBER
        - OPERATOR
        - CUSTOMER
      default: MEMBER
    ProjectGroupsPage:
      title: ProjectGroupsPage
      allOf:
        - $ref: '#/components/schemas/Offset'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/ProjectGroupInfo'
    ProjectGroupInfo:
      title: Project group
      description: Information about project group.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/identifier'
        uuid:
          type: string
          format: uuid
          description: Group identifier for external usage.
        name:
          $ref: '#/components/schemas/name'
        slug:
          $ref: '#/components/schemas/slug'
        permission:
          $ref: '#/components/schemas/projectRole'
        added_at:
          type: string
          format: date-time
          description: Timestamp of project adding to group.
        updated_at:
          type: string
          format: date-time
          description: Timestamp of project updating in group.
        stats:
          type: object
          description: Group statistics.
          properties:
            users_count:
              type: integer
              format: int32
              description: Number of users in the group.
    LogType:
      title: Project Log Type
      description: Information about log type in project.s
      type: object
      properties:
        id:
          $ref: '#/components/schemas/identifier'
        name:
          type: string
          minLength: 3
          maxLength: 16
          pattern: ^[A-Za-z0-9 ]+$
          description: Name of log type. Unique within project.
        level:
          type: integer
          minimum: 1
          maximum: 59999
          description: Numeric value of log type. Unique within project.
        style:
          $ref: '#/components/schemas/LogTypeStyle'
        isFilterable:
          type: boolean
          default: false
          description: Indicates if the log level is filterable.
    LogTypeStyle:
      title: Log Type Style
      description: Style information for a log type.
      type: object
      properties:
        label_color:
          type: string
          format: hex-color
          default: '#4DB6AC'
          description: Color associated with the log type. Hex format.
          pattern: ^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$
        background_color:
          type: string
          format: hex-color
          default: '#FFFFFF'
          description: Background color associated with the log type. Hex format.
          pattern: ^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$
        text_color:
          type: string
          format: hex-color
          default: '#464547'
          description: Text color associated with the log type. Hex format.
          pattern: ^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$
        text_style:
          type: string
          description: Text style associated with the log type.
          enum:
            - bold
            - normal
          default: normal
  responses:
    Error:
      description: Error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Update:
      description: Successful update response
      content:
        application/json:
          schema:
            title: Successful update
            type: object
            properties:
              message:
                type: string
                default: The update was completed successfully.
  parameters:
    Offset:
      name: offset
      in: query
      required: false
      schema:
        type: integer
        default: 0
      description: The offset used for this page of results.
    Limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        default: 300
        minimum: 0
        maximum: 1000
      description: >-
        The limit used for this page of results. This will be the same as the
        limit query parameter unless it exceeded the maximum value allowed for
        this API endpoint.
    Order:
      name: order
      in: query
      schema:
        type: string
        enum:
          - ASC
          - DESC
        default: ASC
      description: Indicate sorting direction.
    GroupId:
      name: group_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
        minimum: 0
      description: Group identifier.
    UserId:
      name: user_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
        minimum: 0
      description: User identifier.
    ProjectId:
      name: project_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
        minimum: 0
      description: Project identifier.
